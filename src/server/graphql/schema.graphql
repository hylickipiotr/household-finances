### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Category {
  icon: String
  id: String!
  name: String!
}

input CategoryCreateInput {
  Transaction: TransactionCreateNestedManyWithoutCategoryInput
  icon: String
  id: String
  name: String!
}

input CategoryCreateNestedOneWithoutTransactionInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutTransactionInput
  create: CategoryCreateWithoutTransactionInput
}

input CategoryCreateOrConnectWithoutTransactionInput {
  create: CategoryCreateWithoutTransactionInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutTransactionInput {
  icon: String
  id: String
  name: String!
}

input CategoryUpdateInput {
  Transaction: TransactionUpdateManyWithoutCategoryInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CategoryUpdateOneRequiredWithoutTransactionInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutTransactionInput
  create: CategoryCreateWithoutTransactionInput
  update: CategoryUpdateWithoutTransactionInput
  upsert: CategoryUpsertWithoutTransactionInput
}

input CategoryUpdateWithoutTransactionInput {
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CategoryUpsertWithoutTransactionInput {
  create: CategoryCreateWithoutTransactionInput!
  update: CategoryUpdateWithoutTransactionInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  Transaction: TransactionListRelationFilter
  icon: StringNullableFilter
  id: StringFilter
  name: StringFilter
}

input CategoryWhereUniqueInput {
  id: String
  name: String
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

type Mutation {
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneTransaction(data: TransactionCreateInput!): Transaction!
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int, where: CategoryWhereInput): [Category!]!
  suggestTransactionTitle(query: String!): [String]
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(after: TransactionWhereUniqueInput, before: TransactionWhereUniqueInput, first: Int, last: Int, orderBy: [TransactionOrderByInput!], where: TransactionWhereInput): [TransactionsExtended!]!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Transaction {
  amount: Float!
  category: Category!
  createdAt: DateTime!
  date: DateTime!
  description: String
  id: String!
  isIncome: Boolean!
  title: String!
  updatedAt: DateTime!
}

input TransactionCreateInput {
  amount: Float!
  category: CategoryCreateNestedOneWithoutTransactionInput!
  createdAt: DateTime
  date: DateTime!
  description: String
  id: String
  isIncome: Boolean!
  title: String!
  updatedAt: DateTime
}

input TransactionCreateNestedManyWithoutCategoryInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutCategoryInput!]
  create: [TransactionCreateWithoutCategoryInput!]
}

input TransactionCreateOrConnectWithoutCategoryInput {
  create: TransactionCreateWithoutCategoryInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateWithoutCategoryInput {
  amount: Float!
  createdAt: DateTime
  date: DateTime!
  description: String
  id: String
  isIncome: Boolean!
  title: String!
  updatedAt: DateTime
}

input TransactionListRelationFilter {
  every: TransactionWhereInput
  none: TransactionWhereInput
  some: TransactionWhereInput
}

input TransactionOrderByInput {
  amount: SortOrder
  categoryId: SortOrder
  createdAt: SortOrder
  date: SortOrder
  description: SortOrder
  id: SortOrder
  isIncome: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input TransactionScalarWhereInput {
  AND: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  amount: FloatFilter
  categoryId: StringFilter
  createdAt: DateTimeFilter
  date: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  isIncome: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input TransactionUpdateInput {
  amount: FloatFieldUpdateOperationsInput
  category: CategoryUpdateOneRequiredWithoutTransactionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isIncome: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isIncome: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpdateManyWithWhereWithoutCategoryInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithoutCategoryInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutCategoryInput!]
  create: [TransactionCreateWithoutCategoryInput!]
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutCategoryInput!]
}

input TransactionUpdateWithWhereUniqueWithoutCategoryInput {
  data: TransactionUpdateWithoutCategoryInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithoutCategoryInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isIncome: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpsertWithWhereUniqueWithoutCategoryInput {
  create: TransactionCreateWithoutCategoryInput!
  update: TransactionUpdateWithoutCategoryInput!
  where: TransactionWhereUniqueInput!
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  amount: FloatFilter
  category: CategoryWhereInput
  categoryId: StringFilter
  createdAt: DateTimeFilter
  date: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  isIncome: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input TransactionWhereUniqueInput {
  id: String
}

type TransactionsExtended {
  expendSum: Float!
  incomesSum: Float!
  nodes: [Transaction]!
}
