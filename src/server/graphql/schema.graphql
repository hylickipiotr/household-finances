### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Bookmark implements Node {
  color: Color
  createdAt: String!
  creatorId: String!
  icon: String
  id: ID!
  isFavourite: Boolean
  name: String!
  query: String!
  sort: Int
  updatedAt: String!
}

input BookmarkCreateInput {
  color: Color
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutBookmarkInput!
  icon: String
  id: String
  isFavourite: Boolean
  name: String!
  query: String!
  sort: Int
  updatedAt: DateTime
}

input BookmarkCreateManyCreatorInput {
  color: Color
  createdAt: DateTime
  icon: String
  id: String
  isFavourite: Boolean
  name: String!
  query: String!
  sort: Int
  updatedAt: DateTime
}

input BookmarkCreateManyCreatorInputEnvelope {
  data: [BookmarkCreateManyCreatorInput!]
  skipDuplicates: Boolean
}

input BookmarkCreateNestedManyWithoutCreatorInput {
  connect: [BookmarkWhereUniqueInput!]
  connectOrCreate: [BookmarkCreateOrConnectWithoutCreatorInput!]
  create: [BookmarkCreateWithoutCreatorInput!]
  createMany: BookmarkCreateManyCreatorInputEnvelope
}

input BookmarkCreateOrConnectWithoutCreatorInput {
  create: BookmarkCreateWithoutCreatorInput!
  where: BookmarkWhereUniqueInput!
}

input BookmarkCreateWithoutCreatorInput {
  color: Color
  createdAt: DateTime
  icon: String
  id: String
  isFavourite: Boolean
  name: String!
  query: String!
  sort: Int
  updatedAt: DateTime
}

input BookmarkListRelationFilter {
  every: BookmarkWhereInput
  none: BookmarkWhereInput
  some: BookmarkWhereInput
}

input BookmarkOrderByInput {
  color: SortOrder
  createdAt: SortOrder
  creatorId: SortOrder
  icon: SortOrder
  id: SortOrder
  isFavourite: SortOrder
  name: SortOrder
  query: SortOrder
  sort: SortOrder
  updatedAt: SortOrder
}

input BookmarkScalarWhereInput {
  AND: [BookmarkScalarWhereInput!]
  NOT: [BookmarkScalarWhereInput!]
  OR: [BookmarkScalarWhereInput!]
  color: EnumColorNullableFilter
  createdAt: DateTimeFilter
  creatorId: StringFilter
  icon: StringNullableFilter
  id: StringFilter
  isFavourite: BoolNullableFilter
  name: StringFilter
  query: StringFilter
  sort: IntNullableFilter
  updatedAt: DateTimeFilter
}

input BookmarkUpdateInput {
  color: NullableEnumColorFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutBookmarkInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  query: StringFieldUpdateOperationsInput
  sort: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookmarkUpdateManyMutationInput {
  color: NullableEnumColorFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  query: StringFieldUpdateOperationsInput
  sort: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookmarkUpdateManyWithWhereWithoutCreatorInput {
  data: BookmarkUpdateManyMutationInput!
  where: BookmarkScalarWhereInput!
}

input BookmarkUpdateManyWithoutCreatorInput {
  connect: [BookmarkWhereUniqueInput!]
  connectOrCreate: [BookmarkCreateOrConnectWithoutCreatorInput!]
  create: [BookmarkCreateWithoutCreatorInput!]
  createMany: BookmarkCreateManyCreatorInputEnvelope
  delete: [BookmarkWhereUniqueInput!]
  deleteMany: [BookmarkScalarWhereInput!]
  disconnect: [BookmarkWhereUniqueInput!]
  set: [BookmarkWhereUniqueInput!]
  update: [BookmarkUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [BookmarkUpdateManyWithWhereWithoutCreatorInput!]
  upsert: [BookmarkUpsertWithWhereUniqueWithoutCreatorInput!]
}

input BookmarkUpdateWithWhereUniqueWithoutCreatorInput {
  data: BookmarkUpdateWithoutCreatorInput!
  where: BookmarkWhereUniqueInput!
}

input BookmarkUpdateWithoutCreatorInput {
  color: NullableEnumColorFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  query: StringFieldUpdateOperationsInput
  sort: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookmarkUpsertWithWhereUniqueWithoutCreatorInput {
  create: BookmarkCreateWithoutCreatorInput!
  update: BookmarkUpdateWithoutCreatorInput!
  where: BookmarkWhereUniqueInput!
}

input BookmarkWhereInput {
  AND: [BookmarkWhereInput!]
  NOT: [BookmarkWhereInput!]
  OR: [BookmarkWhereInput!]
  color: EnumColorNullableFilter
  createdAt: DateTimeFilter
  creator: UserWhereInput
  creatorId: StringFilter
  icon: StringNullableFilter
  id: StringFilter
  isFavourite: BoolNullableFilter
  name: StringFilter
  query: StringFilter
  sort: IntNullableFilter
  updatedAt: DateTimeFilter
}

input BookmarkWhereUniqueInput {
  id: String
  sort: Int
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

type Category implements Node {
  createdAt: String!
  creatorId: String!
  icon: String
  id: ID!
  name: String!
  updatedAt: String!
}

input CategoryCreateInput {
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutCategoriesInput!
  icon: String
  id: String
  name: String!
  shops: ShopCreateNestedManyWithoutCategoryInput
  transactions: TransactionCreateNestedManyWithoutCategoryInput
  updatedAt: DateTime
}

input CategoryCreateManyCreatorInput {
  createdAt: DateTime
  icon: String
  id: String
  name: String!
  updatedAt: DateTime
}

input CategoryCreateManyCreatorInputEnvelope {
  data: [CategoryCreateManyCreatorInput!]
  skipDuplicates: Boolean
}

input CategoryCreateNestedManyWithoutCreatorInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutCreatorInput!]
  create: [CategoryCreateWithoutCreatorInput!]
  createMany: CategoryCreateManyCreatorInputEnvelope
}

input CategoryCreateNestedOneWithoutShopsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutShopsInput
  create: CategoryCreateWithoutShopsInput
}

input CategoryCreateNestedOneWithoutTransactionsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutTransactionsInput
  create: CategoryCreateWithoutTransactionsInput
}

input CategoryCreateOrConnectWithoutCreatorInput {
  create: CategoryCreateWithoutCreatorInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateOrConnectWithoutShopsInput {
  create: CategoryCreateWithoutShopsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateOrConnectWithoutTransactionsInput {
  create: CategoryCreateWithoutTransactionsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutCreatorInput {
  createdAt: DateTime
  icon: String
  id: String
  name: String!
  shops: ShopCreateNestedManyWithoutCategoryInput
  transactions: TransactionCreateNestedManyWithoutCategoryInput
  updatedAt: DateTime
}

input CategoryCreateWithoutShopsInput {
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutCategoriesInput!
  icon: String
  id: String
  name: String!
  transactions: TransactionCreateNestedManyWithoutCategoryInput
  updatedAt: DateTime
}

input CategoryCreateWithoutTransactionsInput {
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutCategoriesInput!
  icon: String
  id: String
  name: String!
  shops: ShopCreateNestedManyWithoutCategoryInput
  updatedAt: DateTime
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryOrderByInput {
  createdAt: SortOrder
  creatorId: SortOrder
  icon: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  createdAt: DateTimeFilter
  creatorId: StringFilter
  icon: StringNullableFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input CategoryUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutCategoriesInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  shops: ShopUpdateManyWithoutCategoryInput
  transactions: TransactionUpdateManyWithoutCategoryInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateManyWithWhereWithoutCreatorInput {
  data: CategoryUpdateManyMutationInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateManyWithoutCreatorInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutCreatorInput!]
  create: [CategoryCreateWithoutCreatorInput!]
  createMany: CategoryCreateManyCreatorInputEnvelope
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [CategoryUpdateManyWithWhereWithoutCreatorInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutCreatorInput!]
}

input CategoryUpdateOneWithoutShopsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutShopsInput
  create: CategoryCreateWithoutShopsInput
  delete: Boolean
  disconnect: Boolean
  update: CategoryUpdateWithoutShopsInput
  upsert: CategoryUpsertWithoutShopsInput
}

input CategoryUpdateOneWithoutTransactionsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutTransactionsInput
  create: CategoryCreateWithoutTransactionsInput
  delete: Boolean
  disconnect: Boolean
  update: CategoryUpdateWithoutTransactionsInput
  upsert: CategoryUpsertWithoutTransactionsInput
}

input CategoryUpdateWithWhereUniqueWithoutCreatorInput {
  data: CategoryUpdateWithoutCreatorInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpdateWithoutCreatorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  shops: ShopUpdateManyWithoutCategoryInput
  transactions: TransactionUpdateManyWithoutCategoryInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateWithoutShopsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutCategoriesInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutCategoryInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateWithoutTransactionsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutCategoriesInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  shops: ShopUpdateManyWithoutCategoryInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpsertWithWhereUniqueWithoutCreatorInput {
  create: CategoryCreateWithoutCreatorInput!
  update: CategoryUpdateWithoutCreatorInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithoutShopsInput {
  create: CategoryCreateWithoutShopsInput!
  update: CategoryUpdateWithoutShopsInput!
}

input CategoryUpsertWithoutTransactionsInput {
  create: CategoryCreateWithoutTransactionsInput!
  update: CategoryUpdateWithoutTransactionsInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  createdAt: DateTimeFilter
  creator: UserWhereInput
  creatorId: StringFilter
  icon: StringNullableFilter
  id: StringFilter
  name: StringFilter
  shops: ShopListRelationFilter
  transactions: TransactionListRelationFilter
  updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
  id: String
}

enum Color {
  AMBER
  BLUE
  CYAN
  EMERALD
  FUCHSIA
  GRAY
  GREEN
  INDIGO
  LIGHTBLUE
  LIME
  ORANGE
  PINK
  PURPLE
  RED
  ROSE
  TEAL
  VIOLET
  YELLOW
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumColorNullableFilter {
  equals: Color
  in: [Color!]
  not: NestedEnumColorNullableFilter
  notIn: [Color!]
}

input EnumTransactionTypeFieldUpdateOperationsInput {
  set: TransactionType
}

input EnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
  notIn: [TransactionType!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Item implements Node {
  amount: Float
  createdAt: String!
  creatorId: String!
  id: ID!
  name: String!
  quantity: Float
  transactionId: String!
  unitId: String
  updatedAt: String!
}

input ItemCreateInput {
  amount: Float
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutTransactionItemInput!
  id: String
  name: String!
  quantity: Float
  transaction: TransactionCreateNestedOneWithoutItemsInput!
  unit: UnitCreateNestedOneWithoutItemsInput
  updatedAt: DateTime
}

input ItemCreateManyCreatorInput {
  amount: Float
  createdAt: DateTime
  id: String
  name: String!
  quantity: Float
  transactionId: String!
  unitId: String
  updatedAt: DateTime
}

input ItemCreateManyCreatorInputEnvelope {
  data: [ItemCreateManyCreatorInput!]
  skipDuplicates: Boolean
}

input ItemCreateManyTransactionInput {
  amount: Float
  createdAt: DateTime
  creatorId: String!
  id: String
  name: String!
  quantity: Float
  unitId: String
  updatedAt: DateTime
}

input ItemCreateManyTransactionInputEnvelope {
  data: [ItemCreateManyTransactionInput!]
  skipDuplicates: Boolean
}

input ItemCreateManyUnitInput {
  amount: Float
  createdAt: DateTime
  creatorId: String!
  id: String
  name: String!
  quantity: Float
  transactionId: String!
  updatedAt: DateTime
}

input ItemCreateManyUnitInputEnvelope {
  data: [ItemCreateManyUnitInput!]
  skipDuplicates: Boolean
}

input ItemCreateNestedManyWithoutCreatorInput {
  connect: [ItemWhereUniqueInput!]
  connectOrCreate: [ItemCreateOrConnectWithoutCreatorInput!]
  create: [ItemCreateWithoutCreatorInput!]
  createMany: ItemCreateManyCreatorInputEnvelope
}

input ItemCreateNestedManyWithoutTransactionInput {
  connect: [ItemWhereUniqueInput!]
  connectOrCreate: [ItemCreateOrConnectWithoutTransactionInput!]
  create: [ItemCreateWithoutTransactionInput!]
  createMany: ItemCreateManyTransactionInputEnvelope
}

input ItemCreateNestedManyWithoutUnitInput {
  connect: [ItemWhereUniqueInput!]
  connectOrCreate: [ItemCreateOrConnectWithoutUnitInput!]
  create: [ItemCreateWithoutUnitInput!]
  createMany: ItemCreateManyUnitInputEnvelope
}

input ItemCreateOrConnectWithoutCreatorInput {
  create: ItemCreateWithoutCreatorInput!
  where: ItemWhereUniqueInput!
}

input ItemCreateOrConnectWithoutTransactionInput {
  create: ItemCreateWithoutTransactionInput!
  where: ItemWhereUniqueInput!
}

input ItemCreateOrConnectWithoutUnitInput {
  create: ItemCreateWithoutUnitInput!
  where: ItemWhereUniqueInput!
}

input ItemCreateWithoutCreatorInput {
  amount: Float
  createdAt: DateTime
  id: String
  name: String!
  quantity: Float
  transaction: TransactionCreateNestedOneWithoutItemsInput!
  unit: UnitCreateNestedOneWithoutItemsInput
  updatedAt: DateTime
}

input ItemCreateWithoutTransactionInput {
  amount: Float
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutTransactionItemInput!
  id: String
  name: String!
  quantity: Float
  unit: UnitCreateNestedOneWithoutItemsInput
  updatedAt: DateTime
}

input ItemCreateWithoutUnitInput {
  amount: Float
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutTransactionItemInput!
  id: String
  name: String!
  quantity: Float
  transaction: TransactionCreateNestedOneWithoutItemsInput!
  updatedAt: DateTime
}

input ItemIdTransactionIdCompoundUniqueInput {
  id: String!
  transactionId: String!
}

input ItemListRelationFilter {
  every: ItemWhereInput
  none: ItemWhereInput
  some: ItemWhereInput
}

input ItemOrderByInput {
  amount: SortOrder
  createdAt: SortOrder
  creatorId: SortOrder
  id: SortOrder
  name: SortOrder
  quantity: SortOrder
  transactionId: SortOrder
  unitId: SortOrder
  updatedAt: SortOrder
}

input ItemScalarWhereInput {
  AND: [ItemScalarWhereInput!]
  NOT: [ItemScalarWhereInput!]
  OR: [ItemScalarWhereInput!]
  amount: FloatNullableFilter
  createdAt: DateTimeFilter
  creatorId: StringFilter
  id: StringFilter
  name: StringFilter
  quantity: FloatNullableFilter
  transactionId: StringFilter
  unitId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ItemUpdateInput {
  amount: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutTransactionItemInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  quantity: NullableFloatFieldUpdateOperationsInput
  transaction: TransactionUpdateOneRequiredWithoutItemsInput
  unit: UnitUpdateOneWithoutItemsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ItemUpdateManyMutationInput {
  amount: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  quantity: NullableFloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ItemUpdateManyWithWhereWithoutCreatorInput {
  data: ItemUpdateManyMutationInput!
  where: ItemScalarWhereInput!
}

input ItemUpdateManyWithWhereWithoutTransactionInput {
  data: ItemUpdateManyMutationInput!
  where: ItemScalarWhereInput!
}

input ItemUpdateManyWithWhereWithoutUnitInput {
  data: ItemUpdateManyMutationInput!
  where: ItemScalarWhereInput!
}

input ItemUpdateManyWithoutCreatorInput {
  connect: [ItemWhereUniqueInput!]
  connectOrCreate: [ItemCreateOrConnectWithoutCreatorInput!]
  create: [ItemCreateWithoutCreatorInput!]
  createMany: ItemCreateManyCreatorInputEnvelope
  delete: [ItemWhereUniqueInput!]
  deleteMany: [ItemScalarWhereInput!]
  disconnect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [ItemUpdateManyWithWhereWithoutCreatorInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutCreatorInput!]
}

input ItemUpdateManyWithoutTransactionInput {
  connect: [ItemWhereUniqueInput!]
  connectOrCreate: [ItemCreateOrConnectWithoutTransactionInput!]
  create: [ItemCreateWithoutTransactionInput!]
  createMany: ItemCreateManyTransactionInputEnvelope
  delete: [ItemWhereUniqueInput!]
  deleteMany: [ItemScalarWhereInput!]
  disconnect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutTransactionInput!]
  updateMany: [ItemUpdateManyWithWhereWithoutTransactionInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutTransactionInput!]
}

input ItemUpdateManyWithoutUnitInput {
  connect: [ItemWhereUniqueInput!]
  connectOrCreate: [ItemCreateOrConnectWithoutUnitInput!]
  create: [ItemCreateWithoutUnitInput!]
  createMany: ItemCreateManyUnitInputEnvelope
  delete: [ItemWhereUniqueInput!]
  deleteMany: [ItemScalarWhereInput!]
  disconnect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutUnitInput!]
  updateMany: [ItemUpdateManyWithWhereWithoutUnitInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutUnitInput!]
}

input ItemUpdateWithWhereUniqueWithoutCreatorInput {
  data: ItemUpdateWithoutCreatorInput!
  where: ItemWhereUniqueInput!
}

input ItemUpdateWithWhereUniqueWithoutTransactionInput {
  data: ItemUpdateWithoutTransactionInput!
  where: ItemWhereUniqueInput!
}

input ItemUpdateWithWhereUniqueWithoutUnitInput {
  data: ItemUpdateWithoutUnitInput!
  where: ItemWhereUniqueInput!
}

input ItemUpdateWithoutCreatorInput {
  amount: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  quantity: NullableFloatFieldUpdateOperationsInput
  transaction: TransactionUpdateOneRequiredWithoutItemsInput
  unit: UnitUpdateOneWithoutItemsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ItemUpdateWithoutTransactionInput {
  amount: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutTransactionItemInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  quantity: NullableFloatFieldUpdateOperationsInput
  unit: UnitUpdateOneWithoutItemsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ItemUpdateWithoutUnitInput {
  amount: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutTransactionItemInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  quantity: NullableFloatFieldUpdateOperationsInput
  transaction: TransactionUpdateOneRequiredWithoutItemsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ItemUpsertWithWhereUniqueWithoutCreatorInput {
  create: ItemCreateWithoutCreatorInput!
  update: ItemUpdateWithoutCreatorInput!
  where: ItemWhereUniqueInput!
}

input ItemUpsertWithWhereUniqueWithoutTransactionInput {
  create: ItemCreateWithoutTransactionInput!
  update: ItemUpdateWithoutTransactionInput!
  where: ItemWhereUniqueInput!
}

input ItemUpsertWithWhereUniqueWithoutUnitInput {
  create: ItemCreateWithoutUnitInput!
  update: ItemUpdateWithoutUnitInput!
  where: ItemWhereUniqueInput!
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  amount: FloatNullableFilter
  createdAt: DateTimeFilter
  creator: UserWhereInput
  creatorId: StringFilter
  id: StringFilter
  name: StringFilter
  quantity: FloatNullableFilter
  transaction: TransactionWhereInput
  transactionId: StringFilter
  unit: UnitWhereInput
  unitId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ItemWhereUniqueInput {
  id_transactionId: ItemIdTransactionIdCompoundUniqueInput
}

input LoginInput {
  password: String!
  username: String!
}

type Mutation {
  createOneBookmark(data: BookmarkCreateInput!): Bookmark!
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneItem(data: ItemCreateInput!): Item!
  createOneShop(data: ShopCreateInput!): Shop!
  createOneTag(data: TagCreateInput!): Tag!
  createOneTransaction(data: TransactionCreateInput!): Transaction!
  createOneUnit(data: UnitCreateInput!): Unit!
  deleteOneBookmark(where: BookmarkWhereUniqueInput!): Bookmark
  deleteOneCategory(where: CategoryWhereUniqueInput!): Category
  deleteOneItem(where: ItemWhereUniqueInput!): Item
  deleteOneShop(where: ShopWhereUniqueInput!): Shop
  deleteOneTag(where: TagWhereUniqueInput!): Tag
  deleteOneTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteOneUnit(where: UnitWhereUniqueInput!): Unit
  login(data: LoginInput!): Boolean
  register(data: RegisterInput!): User
  updateOneBookmark(data: BookmarkUpdateInput!, where: BookmarkWhereUniqueInput!): Bookmark
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateOneShop(data: ShopUpdateInput!, where: ShopWhereUniqueInput!): Shop
  updateOneTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateOneTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  updateOneUnit(data: UnitUpdateInput!, where: UnitWhereUniqueInput!): Unit
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumColorNullableFilter {
  equals: Color
  in: [Color!]
  not: NestedEnumColorNullableFilter
  notIn: [Color!]
}

input NestedEnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
  notIn: [TransactionType!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

interface Node {
  createdAt: String!
  creatorId: String!
  id: ID!
  updatedAt: String!
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableEnumColorFieldUpdateOperationsInput {
  set: Color
}

input NullableFloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  bookmark(where: BookmarkWhereUniqueInput!): Bookmark
  bookmarks(after: BookmarkWhereUniqueInput, before: BookmarkWhereUniqueInput, first: Int, last: Int, orderBy: [BookmarkOrderByInput!], where: BookmarkWhereInput): [Bookmark!]!
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int, orderBy: [CategoryOrderByInput!], where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  item(where: ItemWhereUniqueInput!): Item
  items(after: ItemWhereUniqueInput, before: ItemWhereUniqueInput, first: Int, last: Int, orderBy: [ItemOrderByInput!], where: ItemWhereInput): [Item!]!
  shop(where: ShopWhereUniqueInput!): Shop
  shops(after: ShopWhereUniqueInput, before: ShopWhereUniqueInput, first: Int, last: Int, orderBy: [ShopOrderByInput!], where: ShopWhereInput): [Shop!]!
  tag(where: TagWhereUniqueInput!): Tag
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int, orderBy: [TagOrderByInput!], where: TagWhereInput): [Tag!]!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(after: TransactionWhereUniqueInput, before: TransactionWhereUniqueInput, first: Int, last: Int, orderBy: [TransactionOrderByInput!], where: TransactionWhereInput): [Transaction!]!
  unit(where: UnitWhereUniqueInput!): Unit
  units(after: UnitWhereUniqueInput, before: UnitWhereUniqueInput, first: Int, last: Int, orderBy: [UnitOrderByInput!], where: UnitWhereInput): [Unit!]!
}

enum QueryMode {
  default
  insensitive
}

input RegisterInput {
  displayName: String!
  password: String!
  repeatPassword: String!
  username: String!
}

type Shop implements Node {
  categoryId: String
  createdAt: String!
  creatorId: String!
  id: ID!
  isFavourite: Boolean
  logoUrl: String
  name: String!
  updatedAt: String!
}

input ShopCreateInput {
  category: CategoryCreateNestedOneWithoutShopsInput
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutShopsInput!
  id: String
  isFavourite: Boolean
  logoUrl: String
  name: String!
  transactions: TransactionCreateNestedManyWithoutShopInput
  updatedAt: DateTime
}

input ShopCreateManyCategoryInput {
  createdAt: DateTime
  creatorId: String!
  id: String
  isFavourite: Boolean
  logoUrl: String
  name: String!
  updatedAt: DateTime
}

input ShopCreateManyCategoryInputEnvelope {
  data: [ShopCreateManyCategoryInput!]
  skipDuplicates: Boolean
}

input ShopCreateManyCreatorInput {
  categoryId: String
  createdAt: DateTime
  id: String
  isFavourite: Boolean
  logoUrl: String
  name: String!
  updatedAt: DateTime
}

input ShopCreateManyCreatorInputEnvelope {
  data: [ShopCreateManyCreatorInput!]
  skipDuplicates: Boolean
}

input ShopCreateNestedManyWithoutCategoryInput {
  connect: [ShopWhereUniqueInput!]
  connectOrCreate: [ShopCreateOrConnectWithoutCategoryInput!]
  create: [ShopCreateWithoutCategoryInput!]
  createMany: ShopCreateManyCategoryInputEnvelope
}

input ShopCreateNestedManyWithoutCreatorInput {
  connect: [ShopWhereUniqueInput!]
  connectOrCreate: [ShopCreateOrConnectWithoutCreatorInput!]
  create: [ShopCreateWithoutCreatorInput!]
  createMany: ShopCreateManyCreatorInputEnvelope
}

input ShopCreateNestedOneWithoutTransactionsInput {
  connect: ShopWhereUniqueInput
  connectOrCreate: ShopCreateOrConnectWithoutTransactionsInput
  create: ShopCreateWithoutTransactionsInput
}

input ShopCreateOrConnectWithoutCategoryInput {
  create: ShopCreateWithoutCategoryInput!
  where: ShopWhereUniqueInput!
}

input ShopCreateOrConnectWithoutCreatorInput {
  create: ShopCreateWithoutCreatorInput!
  where: ShopWhereUniqueInput!
}

input ShopCreateOrConnectWithoutTransactionsInput {
  create: ShopCreateWithoutTransactionsInput!
  where: ShopWhereUniqueInput!
}

input ShopCreateWithoutCategoryInput {
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutShopsInput!
  id: String
  isFavourite: Boolean
  logoUrl: String
  name: String!
  transactions: TransactionCreateNestedManyWithoutShopInput
  updatedAt: DateTime
}

input ShopCreateWithoutCreatorInput {
  category: CategoryCreateNestedOneWithoutShopsInput
  createdAt: DateTime
  id: String
  isFavourite: Boolean
  logoUrl: String
  name: String!
  transactions: TransactionCreateNestedManyWithoutShopInput
  updatedAt: DateTime
}

input ShopCreateWithoutTransactionsInput {
  category: CategoryCreateNestedOneWithoutShopsInput
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutShopsInput!
  id: String
  isFavourite: Boolean
  logoUrl: String
  name: String!
  updatedAt: DateTime
}

input ShopListRelationFilter {
  every: ShopWhereInput
  none: ShopWhereInput
  some: ShopWhereInput
}

input ShopOrderByInput {
  categoryId: SortOrder
  createdAt: SortOrder
  creatorId: SortOrder
  id: SortOrder
  isFavourite: SortOrder
  logoUrl: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ShopScalarWhereInput {
  AND: [ShopScalarWhereInput!]
  NOT: [ShopScalarWhereInput!]
  OR: [ShopScalarWhereInput!]
  categoryId: StringNullableFilter
  createdAt: DateTimeFilter
  creatorId: StringFilter
  id: StringFilter
  isFavourite: BoolNullableFilter
  logoUrl: StringNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input ShopUpdateInput {
  category: CategoryUpdateOneWithoutShopsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutShopsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  logoUrl: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutShopInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ShopUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  logoUrl: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ShopUpdateManyWithWhereWithoutCategoryInput {
  data: ShopUpdateManyMutationInput!
  where: ShopScalarWhereInput!
}

input ShopUpdateManyWithWhereWithoutCreatorInput {
  data: ShopUpdateManyMutationInput!
  where: ShopScalarWhereInput!
}

input ShopUpdateManyWithoutCategoryInput {
  connect: [ShopWhereUniqueInput!]
  connectOrCreate: [ShopCreateOrConnectWithoutCategoryInput!]
  create: [ShopCreateWithoutCategoryInput!]
  createMany: ShopCreateManyCategoryInputEnvelope
  delete: [ShopWhereUniqueInput!]
  deleteMany: [ShopScalarWhereInput!]
  disconnect: [ShopWhereUniqueInput!]
  set: [ShopWhereUniqueInput!]
  update: [ShopUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ShopUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [ShopUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ShopUpdateManyWithoutCreatorInput {
  connect: [ShopWhereUniqueInput!]
  connectOrCreate: [ShopCreateOrConnectWithoutCreatorInput!]
  create: [ShopCreateWithoutCreatorInput!]
  createMany: ShopCreateManyCreatorInputEnvelope
  delete: [ShopWhereUniqueInput!]
  deleteMany: [ShopScalarWhereInput!]
  disconnect: [ShopWhereUniqueInput!]
  set: [ShopWhereUniqueInput!]
  update: [ShopUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [ShopUpdateManyWithWhereWithoutCreatorInput!]
  upsert: [ShopUpsertWithWhereUniqueWithoutCreatorInput!]
}

input ShopUpdateOneWithoutTransactionsInput {
  connect: ShopWhereUniqueInput
  connectOrCreate: ShopCreateOrConnectWithoutTransactionsInput
  create: ShopCreateWithoutTransactionsInput
  delete: Boolean
  disconnect: Boolean
  update: ShopUpdateWithoutTransactionsInput
  upsert: ShopUpsertWithoutTransactionsInput
}

input ShopUpdateWithWhereUniqueWithoutCategoryInput {
  data: ShopUpdateWithoutCategoryInput!
  where: ShopWhereUniqueInput!
}

input ShopUpdateWithWhereUniqueWithoutCreatorInput {
  data: ShopUpdateWithoutCreatorInput!
  where: ShopWhereUniqueInput!
}

input ShopUpdateWithoutCategoryInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutShopsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  logoUrl: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutShopInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ShopUpdateWithoutCreatorInput {
  category: CategoryUpdateOneWithoutShopsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  logoUrl: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutShopInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ShopUpdateWithoutTransactionsInput {
  category: CategoryUpdateOneWithoutShopsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutShopsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  logoUrl: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ShopUpsertWithWhereUniqueWithoutCategoryInput {
  create: ShopCreateWithoutCategoryInput!
  update: ShopUpdateWithoutCategoryInput!
  where: ShopWhereUniqueInput!
}

input ShopUpsertWithWhereUniqueWithoutCreatorInput {
  create: ShopCreateWithoutCreatorInput!
  update: ShopUpdateWithoutCreatorInput!
  where: ShopWhereUniqueInput!
}

input ShopUpsertWithoutTransactionsInput {
  create: ShopCreateWithoutTransactionsInput!
  update: ShopUpdateWithoutTransactionsInput!
}

input ShopWhereInput {
  AND: [ShopWhereInput!]
  NOT: [ShopWhereInput!]
  OR: [ShopWhereInput!]
  category: CategoryWhereInput
  categoryId: StringNullableFilter
  createdAt: DateTimeFilter
  creator: UserWhereInput
  creatorId: StringFilter
  id: StringFilter
  isFavourite: BoolNullableFilter
  logoUrl: StringNullableFilter
  name: StringFilter
  transactions: TransactionListRelationFilter
  updatedAt: DateTimeFilter
}

input ShopWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Tag implements Node {
  createdAt: String!
  creatorId: String!
  id: ID!
  name: String!
  updatedAt: String!
}

input TagCreateInput {
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutTagsInput!
  id: String
  name: String!
  transactions: TransactionTagsCreateNestedManyWithoutTagInput
  updatedAt: DateTime
}

input TagCreateManyCreatorInput {
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input TagCreateManyCreatorInputEnvelope {
  data: [TagCreateManyCreatorInput!]
  skipDuplicates: Boolean
}

input TagCreateNestedManyWithoutCreatorInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutCreatorInput!]
  create: [TagCreateWithoutCreatorInput!]
  createMany: TagCreateManyCreatorInputEnvelope
}

input TagCreateNestedOneWithoutTransactionsInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutTransactionsInput
  create: TagCreateWithoutTransactionsInput
}

input TagCreateOrConnectWithoutCreatorInput {
  create: TagCreateWithoutCreatorInput!
  where: TagWhereUniqueInput!
}

input TagCreateOrConnectWithoutTransactionsInput {
  create: TagCreateWithoutTransactionsInput!
  where: TagWhereUniqueInput!
}

input TagCreateWithoutCreatorInput {
  createdAt: DateTime
  id: String
  name: String!
  transactions: TransactionTagsCreateNestedManyWithoutTagInput
  updatedAt: DateTime
}

input TagCreateWithoutTransactionsInput {
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutTagsInput!
  id: String
  name: String!
  updatedAt: DateTime
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagOrderByInput {
  createdAt: SortOrder
  creatorId: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  createdAt: DateTimeFilter
  creatorId: StringFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input TagUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutTagsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  transactions: TransactionTagsUpdateManyWithoutTagInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateManyWithWhereWithoutCreatorInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateManyWithoutCreatorInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutCreatorInput!]
  create: [TagCreateWithoutCreatorInput!]
  createMany: TagCreateManyCreatorInputEnvelope
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [TagUpdateManyWithWhereWithoutCreatorInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutCreatorInput!]
}

input TagUpdateOneRequiredWithoutTransactionsInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutTransactionsInput
  create: TagCreateWithoutTransactionsInput
  update: TagUpdateWithoutTransactionsInput
  upsert: TagUpsertWithoutTransactionsInput
}

input TagUpdateWithWhereUniqueWithoutCreatorInput {
  data: TagUpdateWithoutCreatorInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithoutCreatorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  transactions: TransactionTagsUpdateManyWithoutTagInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateWithoutTransactionsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutTagsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpsertWithWhereUniqueWithoutCreatorInput {
  create: TagCreateWithoutCreatorInput!
  update: TagUpdateWithoutCreatorInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithoutTransactionsInput {
  create: TagCreateWithoutTransactionsInput!
  update: TagUpdateWithoutTransactionsInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  createdAt: DateTimeFilter
  creator: UserWhereInput
  creatorId: StringFilter
  id: StringFilter
  name: StringFilter
  transactions: TransactionTagsListRelationFilter
  updatedAt: DateTimeFilter
}

input TagWhereUniqueInput {
  id: String
}

type Transaction implements Node {
  amount: Float!
  categoryId: String
  createdAt: String!
  creatorId: String!
  date: DateTime
  id: ID!
  isFavourite: Boolean
  name: String!
  note: String
  shopId: String
  type: TransactionType!
  updatedAt: String!
}

input TransactionCreateInput {
  amount: Float!
  category: CategoryCreateNestedOneWithoutTransactionsInput
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutTransactionsInput!
  date: DateTime
  id: String
  isFavourite: Boolean
  items: ItemCreateNestedManyWithoutTransactionInput
  name: String!
  note: String
  shop: ShopCreateNestedOneWithoutTransactionsInput
  tags: TransactionTagsCreateNestedManyWithoutTransactionInput
  type: TransactionType!
  updatedAt: DateTime
}

input TransactionCreateManyCategoryInput {
  amount: Float!
  createdAt: DateTime
  creatorId: String!
  date: DateTime
  id: String
  isFavourite: Boolean
  name: String!
  note: String
  shopId: String
  type: TransactionType!
  updatedAt: DateTime
}

input TransactionCreateManyCategoryInputEnvelope {
  data: [TransactionCreateManyCategoryInput!]
  skipDuplicates: Boolean
}

input TransactionCreateManyCreatorInput {
  amount: Float!
  categoryId: String
  createdAt: DateTime
  date: DateTime
  id: String
  isFavourite: Boolean
  name: String!
  note: String
  shopId: String
  type: TransactionType!
  updatedAt: DateTime
}

input TransactionCreateManyCreatorInputEnvelope {
  data: [TransactionCreateManyCreatorInput!]
  skipDuplicates: Boolean
}

input TransactionCreateManyShopInput {
  amount: Float!
  categoryId: String
  createdAt: DateTime
  creatorId: String!
  date: DateTime
  id: String
  isFavourite: Boolean
  name: String!
  note: String
  type: TransactionType!
  updatedAt: DateTime
}

input TransactionCreateManyShopInputEnvelope {
  data: [TransactionCreateManyShopInput!]
  skipDuplicates: Boolean
}

input TransactionCreateNestedManyWithoutCategoryInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutCategoryInput!]
  create: [TransactionCreateWithoutCategoryInput!]
  createMany: TransactionCreateManyCategoryInputEnvelope
}

input TransactionCreateNestedManyWithoutCreatorInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutCreatorInput!]
  create: [TransactionCreateWithoutCreatorInput!]
  createMany: TransactionCreateManyCreatorInputEnvelope
}

input TransactionCreateNestedManyWithoutShopInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutShopInput!]
  create: [TransactionCreateWithoutShopInput!]
  createMany: TransactionCreateManyShopInputEnvelope
}

input TransactionCreateNestedOneWithoutItemsInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutItemsInput
  create: TransactionCreateWithoutItemsInput
}

input TransactionCreateNestedOneWithoutTagsInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutTagsInput
  create: TransactionCreateWithoutTagsInput
}

input TransactionCreateOrConnectWithoutCategoryInput {
  create: TransactionCreateWithoutCategoryInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutCreatorInput {
  create: TransactionCreateWithoutCreatorInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutItemsInput {
  create: TransactionCreateWithoutItemsInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutShopInput {
  create: TransactionCreateWithoutShopInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutTagsInput {
  create: TransactionCreateWithoutTagsInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateWithoutCategoryInput {
  amount: Float!
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutTransactionsInput!
  date: DateTime
  id: String
  isFavourite: Boolean
  items: ItemCreateNestedManyWithoutTransactionInput
  name: String!
  note: String
  shop: ShopCreateNestedOneWithoutTransactionsInput
  tags: TransactionTagsCreateNestedManyWithoutTransactionInput
  type: TransactionType!
  updatedAt: DateTime
}

input TransactionCreateWithoutCreatorInput {
  amount: Float!
  category: CategoryCreateNestedOneWithoutTransactionsInput
  createdAt: DateTime
  date: DateTime
  id: String
  isFavourite: Boolean
  items: ItemCreateNestedManyWithoutTransactionInput
  name: String!
  note: String
  shop: ShopCreateNestedOneWithoutTransactionsInput
  tags: TransactionTagsCreateNestedManyWithoutTransactionInput
  type: TransactionType!
  updatedAt: DateTime
}

input TransactionCreateWithoutItemsInput {
  amount: Float!
  category: CategoryCreateNestedOneWithoutTransactionsInput
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutTransactionsInput!
  date: DateTime
  id: String
  isFavourite: Boolean
  name: String!
  note: String
  shop: ShopCreateNestedOneWithoutTransactionsInput
  tags: TransactionTagsCreateNestedManyWithoutTransactionInput
  type: TransactionType!
  updatedAt: DateTime
}

input TransactionCreateWithoutShopInput {
  amount: Float!
  category: CategoryCreateNestedOneWithoutTransactionsInput
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutTransactionsInput!
  date: DateTime
  id: String
  isFavourite: Boolean
  items: ItemCreateNestedManyWithoutTransactionInput
  name: String!
  note: String
  tags: TransactionTagsCreateNestedManyWithoutTransactionInput
  type: TransactionType!
  updatedAt: DateTime
}

input TransactionCreateWithoutTagsInput {
  amount: Float!
  category: CategoryCreateNestedOneWithoutTransactionsInput
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutTransactionsInput!
  date: DateTime
  id: String
  isFavourite: Boolean
  items: ItemCreateNestedManyWithoutTransactionInput
  name: String!
  note: String
  shop: ShopCreateNestedOneWithoutTransactionsInput
  type: TransactionType!
  updatedAt: DateTime
}

input TransactionListRelationFilter {
  every: TransactionWhereInput
  none: TransactionWhereInput
  some: TransactionWhereInput
}

input TransactionOrderByInput {
  amount: SortOrder
  categoryId: SortOrder
  createdAt: SortOrder
  creatorId: SortOrder
  date: SortOrder
  id: SortOrder
  isFavourite: SortOrder
  name: SortOrder
  note: SortOrder
  shopId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input TransactionScalarWhereInput {
  AND: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  amount: FloatFilter
  categoryId: StringNullableFilter
  createdAt: DateTimeFilter
  creatorId: StringFilter
  date: DateTimeNullableFilter
  id: StringFilter
  isFavourite: BoolNullableFilter
  name: StringFilter
  note: StringNullableFilter
  shopId: StringNullableFilter
  type: EnumTransactionTypeFilter
  updatedAt: DateTimeFilter
}

input TransactionTagsCreateManyCreatorInput {
  createdAt: DateTime
  tagId: String!
  transactionId: String!
  updatedAt: DateTime
}

input TransactionTagsCreateManyCreatorInputEnvelope {
  data: [TransactionTagsCreateManyCreatorInput!]
  skipDuplicates: Boolean
}

input TransactionTagsCreateManyTagInput {
  createdAt: DateTime
  creatorId: String!
  transactionId: String!
  updatedAt: DateTime
}

input TransactionTagsCreateManyTagInputEnvelope {
  data: [TransactionTagsCreateManyTagInput!]
  skipDuplicates: Boolean
}

input TransactionTagsCreateManyTransactionInput {
  createdAt: DateTime
  creatorId: String!
  tagId: String!
  updatedAt: DateTime
}

input TransactionTagsCreateManyTransactionInputEnvelope {
  data: [TransactionTagsCreateManyTransactionInput!]
  skipDuplicates: Boolean
}

input TransactionTagsCreateNestedManyWithoutCreatorInput {
  connect: [TransactionTagsWhereUniqueInput!]
  connectOrCreate: [TransactionTagsCreateOrConnectWithoutCreatorInput!]
  create: [TransactionTagsCreateWithoutCreatorInput!]
  createMany: TransactionTagsCreateManyCreatorInputEnvelope
}

input TransactionTagsCreateNestedManyWithoutTagInput {
  connect: [TransactionTagsWhereUniqueInput!]
  connectOrCreate: [TransactionTagsCreateOrConnectWithoutTagInput!]
  create: [TransactionTagsCreateWithoutTagInput!]
  createMany: TransactionTagsCreateManyTagInputEnvelope
}

input TransactionTagsCreateNestedManyWithoutTransactionInput {
  connect: [TransactionTagsWhereUniqueInput!]
  connectOrCreate: [TransactionTagsCreateOrConnectWithoutTransactionInput!]
  create: [TransactionTagsCreateWithoutTransactionInput!]
  createMany: TransactionTagsCreateManyTransactionInputEnvelope
}

input TransactionTagsCreateOrConnectWithoutCreatorInput {
  create: TransactionTagsCreateWithoutCreatorInput!
  where: TransactionTagsWhereUniqueInput!
}

input TransactionTagsCreateOrConnectWithoutTagInput {
  create: TransactionTagsCreateWithoutTagInput!
  where: TransactionTagsWhereUniqueInput!
}

input TransactionTagsCreateOrConnectWithoutTransactionInput {
  create: TransactionTagsCreateWithoutTransactionInput!
  where: TransactionTagsWhereUniqueInput!
}

input TransactionTagsCreateWithoutCreatorInput {
  createdAt: DateTime
  tag: TagCreateNestedOneWithoutTransactionsInput!
  transaction: TransactionCreateNestedOneWithoutTagsInput!
  updatedAt: DateTime
}

input TransactionTagsCreateWithoutTagInput {
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutTransactionTagsInput!
  transaction: TransactionCreateNestedOneWithoutTagsInput!
  updatedAt: DateTime
}

input TransactionTagsCreateWithoutTransactionInput {
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutTransactionTagsInput!
  tag: TagCreateNestedOneWithoutTransactionsInput!
  updatedAt: DateTime
}

input TransactionTagsListRelationFilter {
  every: TransactionTagsWhereInput
  none: TransactionTagsWhereInput
  some: TransactionTagsWhereInput
}

input TransactionTagsScalarWhereInput {
  AND: [TransactionTagsScalarWhereInput!]
  NOT: [TransactionTagsScalarWhereInput!]
  OR: [TransactionTagsScalarWhereInput!]
  createdAt: DateTimeFilter
  creatorId: StringFilter
  tagId: StringFilter
  transactionId: StringFilter
  updatedAt: DateTimeFilter
}

input TransactionTagsTransactionIdTagIdCompoundUniqueInput {
  tagId: String!
  transactionId: String!
}

input TransactionTagsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionTagsUpdateManyWithWhereWithoutCreatorInput {
  data: TransactionTagsUpdateManyMutationInput!
  where: TransactionTagsScalarWhereInput!
}

input TransactionTagsUpdateManyWithWhereWithoutTagInput {
  data: TransactionTagsUpdateManyMutationInput!
  where: TransactionTagsScalarWhereInput!
}

input TransactionTagsUpdateManyWithWhereWithoutTransactionInput {
  data: TransactionTagsUpdateManyMutationInput!
  where: TransactionTagsScalarWhereInput!
}

input TransactionTagsUpdateManyWithoutCreatorInput {
  connect: [TransactionTagsWhereUniqueInput!]
  connectOrCreate: [TransactionTagsCreateOrConnectWithoutCreatorInput!]
  create: [TransactionTagsCreateWithoutCreatorInput!]
  createMany: TransactionTagsCreateManyCreatorInputEnvelope
  delete: [TransactionTagsWhereUniqueInput!]
  deleteMany: [TransactionTagsScalarWhereInput!]
  disconnect: [TransactionTagsWhereUniqueInput!]
  set: [TransactionTagsWhereUniqueInput!]
  update: [TransactionTagsUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [TransactionTagsUpdateManyWithWhereWithoutCreatorInput!]
  upsert: [TransactionTagsUpsertWithWhereUniqueWithoutCreatorInput!]
}

input TransactionTagsUpdateManyWithoutTagInput {
  connect: [TransactionTagsWhereUniqueInput!]
  connectOrCreate: [TransactionTagsCreateOrConnectWithoutTagInput!]
  create: [TransactionTagsCreateWithoutTagInput!]
  createMany: TransactionTagsCreateManyTagInputEnvelope
  delete: [TransactionTagsWhereUniqueInput!]
  deleteMany: [TransactionTagsScalarWhereInput!]
  disconnect: [TransactionTagsWhereUniqueInput!]
  set: [TransactionTagsWhereUniqueInput!]
  update: [TransactionTagsUpdateWithWhereUniqueWithoutTagInput!]
  updateMany: [TransactionTagsUpdateManyWithWhereWithoutTagInput!]
  upsert: [TransactionTagsUpsertWithWhereUniqueWithoutTagInput!]
}

input TransactionTagsUpdateManyWithoutTransactionInput {
  connect: [TransactionTagsWhereUniqueInput!]
  connectOrCreate: [TransactionTagsCreateOrConnectWithoutTransactionInput!]
  create: [TransactionTagsCreateWithoutTransactionInput!]
  createMany: TransactionTagsCreateManyTransactionInputEnvelope
  delete: [TransactionTagsWhereUniqueInput!]
  deleteMany: [TransactionTagsScalarWhereInput!]
  disconnect: [TransactionTagsWhereUniqueInput!]
  set: [TransactionTagsWhereUniqueInput!]
  update: [TransactionTagsUpdateWithWhereUniqueWithoutTransactionInput!]
  updateMany: [TransactionTagsUpdateManyWithWhereWithoutTransactionInput!]
  upsert: [TransactionTagsUpsertWithWhereUniqueWithoutTransactionInput!]
}

input TransactionTagsUpdateWithWhereUniqueWithoutCreatorInput {
  data: TransactionTagsUpdateWithoutCreatorInput!
  where: TransactionTagsWhereUniqueInput!
}

input TransactionTagsUpdateWithWhereUniqueWithoutTagInput {
  data: TransactionTagsUpdateWithoutTagInput!
  where: TransactionTagsWhereUniqueInput!
}

input TransactionTagsUpdateWithWhereUniqueWithoutTransactionInput {
  data: TransactionTagsUpdateWithoutTransactionInput!
  where: TransactionTagsWhereUniqueInput!
}

input TransactionTagsUpdateWithoutCreatorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  tag: TagUpdateOneRequiredWithoutTransactionsInput
  transaction: TransactionUpdateOneRequiredWithoutTagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionTagsUpdateWithoutTagInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutTransactionTagsInput
  transaction: TransactionUpdateOneRequiredWithoutTagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionTagsUpdateWithoutTransactionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutTransactionTagsInput
  tag: TagUpdateOneRequiredWithoutTransactionsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionTagsUpsertWithWhereUniqueWithoutCreatorInput {
  create: TransactionTagsCreateWithoutCreatorInput!
  update: TransactionTagsUpdateWithoutCreatorInput!
  where: TransactionTagsWhereUniqueInput!
}

input TransactionTagsUpsertWithWhereUniqueWithoutTagInput {
  create: TransactionTagsCreateWithoutTagInput!
  update: TransactionTagsUpdateWithoutTagInput!
  where: TransactionTagsWhereUniqueInput!
}

input TransactionTagsUpsertWithWhereUniqueWithoutTransactionInput {
  create: TransactionTagsCreateWithoutTransactionInput!
  update: TransactionTagsUpdateWithoutTransactionInput!
  where: TransactionTagsWhereUniqueInput!
}

input TransactionTagsWhereInput {
  AND: [TransactionTagsWhereInput!]
  NOT: [TransactionTagsWhereInput!]
  OR: [TransactionTagsWhereInput!]
  createdAt: DateTimeFilter
  creator: UserWhereInput
  creatorId: StringFilter
  tag: TagWhereInput
  tagId: StringFilter
  transaction: TransactionWhereInput
  transactionId: StringFilter
  updatedAt: DateTimeFilter
}

input TransactionTagsWhereUniqueInput {
  transactionId_tagId: TransactionTagsTransactionIdTagIdCompoundUniqueInput
}

enum TransactionType {
  EXPENSE
  INCOME
}

input TransactionUpdateInput {
  amount: FloatFieldUpdateOperationsInput
  category: CategoryUpdateOneWithoutTransactionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutTransactionsInput
  date: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  items: ItemUpdateManyWithoutTransactionInput
  name: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  shop: ShopUpdateOneWithoutTransactionsInput
  tags: TransactionTagsUpdateManyWithoutTransactionInput
  type: EnumTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  type: EnumTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpdateManyWithWhereWithoutCategoryInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithWhereWithoutCreatorInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithWhereWithoutShopInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithoutCategoryInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutCategoryInput!]
  create: [TransactionCreateWithoutCategoryInput!]
  createMany: TransactionCreateManyCategoryInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutCategoryInput!]
}

input TransactionUpdateManyWithoutCreatorInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutCreatorInput!]
  create: [TransactionCreateWithoutCreatorInput!]
  createMany: TransactionCreateManyCreatorInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutCreatorInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutCreatorInput!]
}

input TransactionUpdateManyWithoutShopInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutShopInput!]
  create: [TransactionCreateWithoutShopInput!]
  createMany: TransactionCreateManyShopInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutShopInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutShopInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutShopInput!]
}

input TransactionUpdateOneRequiredWithoutItemsInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutItemsInput
  create: TransactionCreateWithoutItemsInput
  update: TransactionUpdateWithoutItemsInput
  upsert: TransactionUpsertWithoutItemsInput
}

input TransactionUpdateOneRequiredWithoutTagsInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutTagsInput
  create: TransactionCreateWithoutTagsInput
  update: TransactionUpdateWithoutTagsInput
  upsert: TransactionUpsertWithoutTagsInput
}

input TransactionUpdateWithWhereUniqueWithoutCategoryInput {
  data: TransactionUpdateWithoutCategoryInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithWhereUniqueWithoutCreatorInput {
  data: TransactionUpdateWithoutCreatorInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithWhereUniqueWithoutShopInput {
  data: TransactionUpdateWithoutShopInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithoutCategoryInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutTransactionsInput
  date: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  items: ItemUpdateManyWithoutTransactionInput
  name: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  shop: ShopUpdateOneWithoutTransactionsInput
  tags: TransactionTagsUpdateManyWithoutTransactionInput
  type: EnumTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpdateWithoutCreatorInput {
  amount: FloatFieldUpdateOperationsInput
  category: CategoryUpdateOneWithoutTransactionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  items: ItemUpdateManyWithoutTransactionInput
  name: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  shop: ShopUpdateOneWithoutTransactionsInput
  tags: TransactionTagsUpdateManyWithoutTransactionInput
  type: EnumTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpdateWithoutItemsInput {
  amount: FloatFieldUpdateOperationsInput
  category: CategoryUpdateOneWithoutTransactionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutTransactionsInput
  date: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  shop: ShopUpdateOneWithoutTransactionsInput
  tags: TransactionTagsUpdateManyWithoutTransactionInput
  type: EnumTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpdateWithoutShopInput {
  amount: FloatFieldUpdateOperationsInput
  category: CategoryUpdateOneWithoutTransactionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutTransactionsInput
  date: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  items: ItemUpdateManyWithoutTransactionInput
  name: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  tags: TransactionTagsUpdateManyWithoutTransactionInput
  type: EnumTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpdateWithoutTagsInput {
  amount: FloatFieldUpdateOperationsInput
  category: CategoryUpdateOneWithoutTransactionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutTransactionsInput
  date: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  items: ItemUpdateManyWithoutTransactionInput
  name: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  shop: ShopUpdateOneWithoutTransactionsInput
  type: EnumTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpsertWithWhereUniqueWithoutCategoryInput {
  create: TransactionCreateWithoutCategoryInput!
  update: TransactionUpdateWithoutCategoryInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpsertWithWhereUniqueWithoutCreatorInput {
  create: TransactionCreateWithoutCreatorInput!
  update: TransactionUpdateWithoutCreatorInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpsertWithWhereUniqueWithoutShopInput {
  create: TransactionCreateWithoutShopInput!
  update: TransactionUpdateWithoutShopInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpsertWithoutItemsInput {
  create: TransactionCreateWithoutItemsInput!
  update: TransactionUpdateWithoutItemsInput!
}

input TransactionUpsertWithoutTagsInput {
  create: TransactionCreateWithoutTagsInput!
  update: TransactionUpdateWithoutTagsInput!
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  amount: FloatFilter
  category: CategoryWhereInput
  categoryId: StringNullableFilter
  createdAt: DateTimeFilter
  creator: UserWhereInput
  creatorId: StringFilter
  date: DateTimeNullableFilter
  id: StringFilter
  isFavourite: BoolNullableFilter
  items: ItemListRelationFilter
  name: StringFilter
  note: StringNullableFilter
  shop: ShopWhereInput
  shopId: StringNullableFilter
  tags: TransactionTagsListRelationFilter
  type: EnumTransactionTypeFilter
  updatedAt: DateTimeFilter
}

input TransactionWhereUniqueInput {
  id: String
}

type Unit implements Node {
  createdAt: String!
  creatorId: String!
  id: ID!
  name: String!
  updatedAt: String!
}

input UnitCreateInput {
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutUnitInput!
  id: String
  items: ItemCreateNestedManyWithoutUnitInput
  name: String!
  updatedAt: DateTime
}

input UnitCreateManyCreatorInput {
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input UnitCreateManyCreatorInputEnvelope {
  data: [UnitCreateManyCreatorInput!]
  skipDuplicates: Boolean
}

input UnitCreateNestedManyWithoutCreatorInput {
  connect: [UnitWhereUniqueInput!]
  connectOrCreate: [UnitCreateOrConnectWithoutCreatorInput!]
  create: [UnitCreateWithoutCreatorInput!]
  createMany: UnitCreateManyCreatorInputEnvelope
}

input UnitCreateNestedOneWithoutItemsInput {
  connect: UnitWhereUniqueInput
  connectOrCreate: UnitCreateOrConnectWithoutItemsInput
  create: UnitCreateWithoutItemsInput
}

input UnitCreateOrConnectWithoutCreatorInput {
  create: UnitCreateWithoutCreatorInput!
  where: UnitWhereUniqueInput!
}

input UnitCreateOrConnectWithoutItemsInput {
  create: UnitCreateWithoutItemsInput!
  where: UnitWhereUniqueInput!
}

input UnitCreateWithoutCreatorInput {
  createdAt: DateTime
  id: String
  items: ItemCreateNestedManyWithoutUnitInput
  name: String!
  updatedAt: DateTime
}

input UnitCreateWithoutItemsInput {
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutUnitInput!
  id: String
  name: String!
  updatedAt: DateTime
}

input UnitListRelationFilter {
  every: UnitWhereInput
  none: UnitWhereInput
  some: UnitWhereInput
}

input UnitOrderByInput {
  createdAt: SortOrder
  creatorId: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input UnitScalarWhereInput {
  AND: [UnitScalarWhereInput!]
  NOT: [UnitScalarWhereInput!]
  OR: [UnitScalarWhereInput!]
  createdAt: DateTimeFilter
  creatorId: StringFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input UnitUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutUnitInput
  id: StringFieldUpdateOperationsInput
  items: ItemUpdateManyWithoutUnitInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UnitUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UnitUpdateManyWithWhereWithoutCreatorInput {
  data: UnitUpdateManyMutationInput!
  where: UnitScalarWhereInput!
}

input UnitUpdateManyWithoutCreatorInput {
  connect: [UnitWhereUniqueInput!]
  connectOrCreate: [UnitCreateOrConnectWithoutCreatorInput!]
  create: [UnitCreateWithoutCreatorInput!]
  createMany: UnitCreateManyCreatorInputEnvelope
  delete: [UnitWhereUniqueInput!]
  deleteMany: [UnitScalarWhereInput!]
  disconnect: [UnitWhereUniqueInput!]
  set: [UnitWhereUniqueInput!]
  update: [UnitUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [UnitUpdateManyWithWhereWithoutCreatorInput!]
  upsert: [UnitUpsertWithWhereUniqueWithoutCreatorInput!]
}

input UnitUpdateOneWithoutItemsInput {
  connect: UnitWhereUniqueInput
  connectOrCreate: UnitCreateOrConnectWithoutItemsInput
  create: UnitCreateWithoutItemsInput
  delete: Boolean
  disconnect: Boolean
  update: UnitUpdateWithoutItemsInput
  upsert: UnitUpsertWithoutItemsInput
}

input UnitUpdateWithWhereUniqueWithoutCreatorInput {
  data: UnitUpdateWithoutCreatorInput!
  where: UnitWhereUniqueInput!
}

input UnitUpdateWithoutCreatorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  items: ItemUpdateManyWithoutUnitInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UnitUpdateWithoutItemsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  creator: UserUpdateOneRequiredWithoutUnitInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UnitUpsertWithWhereUniqueWithoutCreatorInput {
  create: UnitCreateWithoutCreatorInput!
  update: UnitUpdateWithoutCreatorInput!
  where: UnitWhereUniqueInput!
}

input UnitUpsertWithoutItemsInput {
  create: UnitCreateWithoutItemsInput!
  update: UnitUpdateWithoutItemsInput!
}

input UnitWhereInput {
  AND: [UnitWhereInput!]
  NOT: [UnitWhereInput!]
  OR: [UnitWhereInput!]
  createdAt: DateTimeFilter
  creator: UserWhereInput
  creatorId: StringFilter
  id: StringFilter
  items: ItemListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input UnitWhereUniqueInput {
  id: String
}

type User {
  displayName: String!
  id: String!
  username: String!
}

input UserCreateNestedOneWithoutBookmarkInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBookmarkInput
  create: UserCreateWithoutBookmarkInput
}

input UserCreateNestedOneWithoutCategoriesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCategoriesInput
  create: UserCreateWithoutCategoriesInput
}

input UserCreateNestedOneWithoutShopsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutShopsInput
  create: UserCreateWithoutShopsInput
}

input UserCreateNestedOneWithoutTagsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTagsInput
  create: UserCreateWithoutTagsInput
}

input UserCreateNestedOneWithoutTransactionItemInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTransactionItemInput
  create: UserCreateWithoutTransactionItemInput
}

input UserCreateNestedOneWithoutTransactionTagsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTransactionTagsInput
  create: UserCreateWithoutTransactionTagsInput
}

input UserCreateNestedOneWithoutTransactionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTransactionsInput
  create: UserCreateWithoutTransactionsInput
}

input UserCreateNestedOneWithoutUnitInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUnitInput
  create: UserCreateWithoutUnitInput
}

input UserCreateOrConnectWithoutBookmarkInput {
  create: UserCreateWithoutBookmarkInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCategoriesInput {
  create: UserCreateWithoutCategoriesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutShopsInput {
  create: UserCreateWithoutShopsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTagsInput {
  create: UserCreateWithoutTagsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTransactionItemInput {
  create: UserCreateWithoutTransactionItemInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTransactionTagsInput {
  create: UserCreateWithoutTransactionTagsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTransactionsInput {
  create: UserCreateWithoutTransactionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUnitInput {
  create: UserCreateWithoutUnitInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutBookmarkInput {
  categories: CategoryCreateNestedManyWithoutCreatorInput
  createdAt: DateTime
  displayName: String!
  id: String
  password: String!
  shops: ShopCreateNestedManyWithoutCreatorInput
  tags: TagCreateNestedManyWithoutCreatorInput
  transactionItem: ItemCreateNestedManyWithoutCreatorInput
  transactionTags: TransactionTagsCreateNestedManyWithoutCreatorInput
  transactions: TransactionCreateNestedManyWithoutCreatorInput
  unit: UnitCreateNestedManyWithoutCreatorInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutCategoriesInput {
  bookmark: BookmarkCreateNestedManyWithoutCreatorInput
  createdAt: DateTime
  displayName: String!
  id: String
  password: String!
  shops: ShopCreateNestedManyWithoutCreatorInput
  tags: TagCreateNestedManyWithoutCreatorInput
  transactionItem: ItemCreateNestedManyWithoutCreatorInput
  transactionTags: TransactionTagsCreateNestedManyWithoutCreatorInput
  transactions: TransactionCreateNestedManyWithoutCreatorInput
  unit: UnitCreateNestedManyWithoutCreatorInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutShopsInput {
  bookmark: BookmarkCreateNestedManyWithoutCreatorInput
  categories: CategoryCreateNestedManyWithoutCreatorInput
  createdAt: DateTime
  displayName: String!
  id: String
  password: String!
  tags: TagCreateNestedManyWithoutCreatorInput
  transactionItem: ItemCreateNestedManyWithoutCreatorInput
  transactionTags: TransactionTagsCreateNestedManyWithoutCreatorInput
  transactions: TransactionCreateNestedManyWithoutCreatorInput
  unit: UnitCreateNestedManyWithoutCreatorInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutTagsInput {
  bookmark: BookmarkCreateNestedManyWithoutCreatorInput
  categories: CategoryCreateNestedManyWithoutCreatorInput
  createdAt: DateTime
  displayName: String!
  id: String
  password: String!
  shops: ShopCreateNestedManyWithoutCreatorInput
  transactionItem: ItemCreateNestedManyWithoutCreatorInput
  transactionTags: TransactionTagsCreateNestedManyWithoutCreatorInput
  transactions: TransactionCreateNestedManyWithoutCreatorInput
  unit: UnitCreateNestedManyWithoutCreatorInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutTransactionItemInput {
  bookmark: BookmarkCreateNestedManyWithoutCreatorInput
  categories: CategoryCreateNestedManyWithoutCreatorInput
  createdAt: DateTime
  displayName: String!
  id: String
  password: String!
  shops: ShopCreateNestedManyWithoutCreatorInput
  tags: TagCreateNestedManyWithoutCreatorInput
  transactionTags: TransactionTagsCreateNestedManyWithoutCreatorInput
  transactions: TransactionCreateNestedManyWithoutCreatorInput
  unit: UnitCreateNestedManyWithoutCreatorInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutTransactionTagsInput {
  bookmark: BookmarkCreateNestedManyWithoutCreatorInput
  categories: CategoryCreateNestedManyWithoutCreatorInput
  createdAt: DateTime
  displayName: String!
  id: String
  password: String!
  shops: ShopCreateNestedManyWithoutCreatorInput
  tags: TagCreateNestedManyWithoutCreatorInput
  transactionItem: ItemCreateNestedManyWithoutCreatorInput
  transactions: TransactionCreateNestedManyWithoutCreatorInput
  unit: UnitCreateNestedManyWithoutCreatorInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutTransactionsInput {
  bookmark: BookmarkCreateNestedManyWithoutCreatorInput
  categories: CategoryCreateNestedManyWithoutCreatorInput
  createdAt: DateTime
  displayName: String!
  id: String
  password: String!
  shops: ShopCreateNestedManyWithoutCreatorInput
  tags: TagCreateNestedManyWithoutCreatorInput
  transactionItem: ItemCreateNestedManyWithoutCreatorInput
  transactionTags: TransactionTagsCreateNestedManyWithoutCreatorInput
  unit: UnitCreateNestedManyWithoutCreatorInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutUnitInput {
  bookmark: BookmarkCreateNestedManyWithoutCreatorInput
  categories: CategoryCreateNestedManyWithoutCreatorInput
  createdAt: DateTime
  displayName: String!
  id: String
  password: String!
  shops: ShopCreateNestedManyWithoutCreatorInput
  tags: TagCreateNestedManyWithoutCreatorInput
  transactionItem: ItemCreateNestedManyWithoutCreatorInput
  transactionTags: TransactionTagsCreateNestedManyWithoutCreatorInput
  transactions: TransactionCreateNestedManyWithoutCreatorInput
  updatedAt: DateTime
  username: String!
}

input UserUpdateOneRequiredWithoutBookmarkInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBookmarkInput
  create: UserCreateWithoutBookmarkInput
  update: UserUpdateWithoutBookmarkInput
  upsert: UserUpsertWithoutBookmarkInput
}

input UserUpdateOneRequiredWithoutCategoriesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCategoriesInput
  create: UserCreateWithoutCategoriesInput
  update: UserUpdateWithoutCategoriesInput
  upsert: UserUpsertWithoutCategoriesInput
}

input UserUpdateOneRequiredWithoutShopsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutShopsInput
  create: UserCreateWithoutShopsInput
  update: UserUpdateWithoutShopsInput
  upsert: UserUpsertWithoutShopsInput
}

input UserUpdateOneRequiredWithoutTagsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTagsInput
  create: UserCreateWithoutTagsInput
  update: UserUpdateWithoutTagsInput
  upsert: UserUpsertWithoutTagsInput
}

input UserUpdateOneRequiredWithoutTransactionItemInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTransactionItemInput
  create: UserCreateWithoutTransactionItemInput
  update: UserUpdateWithoutTransactionItemInput
  upsert: UserUpsertWithoutTransactionItemInput
}

input UserUpdateOneRequiredWithoutTransactionTagsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTransactionTagsInput
  create: UserCreateWithoutTransactionTagsInput
  update: UserUpdateWithoutTransactionTagsInput
  upsert: UserUpsertWithoutTransactionTagsInput
}

input UserUpdateOneRequiredWithoutTransactionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTransactionsInput
  create: UserCreateWithoutTransactionsInput
  update: UserUpdateWithoutTransactionsInput
  upsert: UserUpsertWithoutTransactionsInput
}

input UserUpdateOneRequiredWithoutUnitInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUnitInput
  create: UserCreateWithoutUnitInput
  update: UserUpdateWithoutUnitInput
  upsert: UserUpsertWithoutUnitInput
}

input UserUpdateWithoutBookmarkInput {
  categories: CategoryUpdateManyWithoutCreatorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  shops: ShopUpdateManyWithoutCreatorInput
  tags: TagUpdateManyWithoutCreatorInput
  transactionItem: ItemUpdateManyWithoutCreatorInput
  transactionTags: TransactionTagsUpdateManyWithoutCreatorInput
  transactions: TransactionUpdateManyWithoutCreatorInput
  unit: UnitUpdateManyWithoutCreatorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutCategoriesInput {
  bookmark: BookmarkUpdateManyWithoutCreatorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  shops: ShopUpdateManyWithoutCreatorInput
  tags: TagUpdateManyWithoutCreatorInput
  transactionItem: ItemUpdateManyWithoutCreatorInput
  transactionTags: TransactionTagsUpdateManyWithoutCreatorInput
  transactions: TransactionUpdateManyWithoutCreatorInput
  unit: UnitUpdateManyWithoutCreatorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutShopsInput {
  bookmark: BookmarkUpdateManyWithoutCreatorInput
  categories: CategoryUpdateManyWithoutCreatorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutCreatorInput
  transactionItem: ItemUpdateManyWithoutCreatorInput
  transactionTags: TransactionTagsUpdateManyWithoutCreatorInput
  transactions: TransactionUpdateManyWithoutCreatorInput
  unit: UnitUpdateManyWithoutCreatorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutTagsInput {
  bookmark: BookmarkUpdateManyWithoutCreatorInput
  categories: CategoryUpdateManyWithoutCreatorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  shops: ShopUpdateManyWithoutCreatorInput
  transactionItem: ItemUpdateManyWithoutCreatorInput
  transactionTags: TransactionTagsUpdateManyWithoutCreatorInput
  transactions: TransactionUpdateManyWithoutCreatorInput
  unit: UnitUpdateManyWithoutCreatorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutTransactionItemInput {
  bookmark: BookmarkUpdateManyWithoutCreatorInput
  categories: CategoryUpdateManyWithoutCreatorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  shops: ShopUpdateManyWithoutCreatorInput
  tags: TagUpdateManyWithoutCreatorInput
  transactionTags: TransactionTagsUpdateManyWithoutCreatorInput
  transactions: TransactionUpdateManyWithoutCreatorInput
  unit: UnitUpdateManyWithoutCreatorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutTransactionTagsInput {
  bookmark: BookmarkUpdateManyWithoutCreatorInput
  categories: CategoryUpdateManyWithoutCreatorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  shops: ShopUpdateManyWithoutCreatorInput
  tags: TagUpdateManyWithoutCreatorInput
  transactionItem: ItemUpdateManyWithoutCreatorInput
  transactions: TransactionUpdateManyWithoutCreatorInput
  unit: UnitUpdateManyWithoutCreatorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutTransactionsInput {
  bookmark: BookmarkUpdateManyWithoutCreatorInput
  categories: CategoryUpdateManyWithoutCreatorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  shops: ShopUpdateManyWithoutCreatorInput
  tags: TagUpdateManyWithoutCreatorInput
  transactionItem: ItemUpdateManyWithoutCreatorInput
  transactionTags: TransactionTagsUpdateManyWithoutCreatorInput
  unit: UnitUpdateManyWithoutCreatorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutUnitInput {
  bookmark: BookmarkUpdateManyWithoutCreatorInput
  categories: CategoryUpdateManyWithoutCreatorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  shops: ShopUpdateManyWithoutCreatorInput
  tags: TagUpdateManyWithoutCreatorInput
  transactionItem: ItemUpdateManyWithoutCreatorInput
  transactionTags: TransactionTagsUpdateManyWithoutCreatorInput
  transactions: TransactionUpdateManyWithoutCreatorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutBookmarkInput {
  create: UserCreateWithoutBookmarkInput!
  update: UserUpdateWithoutBookmarkInput!
}

input UserUpsertWithoutCategoriesInput {
  create: UserCreateWithoutCategoriesInput!
  update: UserUpdateWithoutCategoriesInput!
}

input UserUpsertWithoutShopsInput {
  create: UserCreateWithoutShopsInput!
  update: UserUpdateWithoutShopsInput!
}

input UserUpsertWithoutTagsInput {
  create: UserCreateWithoutTagsInput!
  update: UserUpdateWithoutTagsInput!
}

input UserUpsertWithoutTransactionItemInput {
  create: UserCreateWithoutTransactionItemInput!
  update: UserUpdateWithoutTransactionItemInput!
}

input UserUpsertWithoutTransactionTagsInput {
  create: UserCreateWithoutTransactionTagsInput!
  update: UserUpdateWithoutTransactionTagsInput!
}

input UserUpsertWithoutTransactionsInput {
  create: UserCreateWithoutTransactionsInput!
  update: UserUpdateWithoutTransactionsInput!
}

input UserUpsertWithoutUnitInput {
  create: UserCreateWithoutUnitInput!
  update: UserUpdateWithoutUnitInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  bookmark: BookmarkListRelationFilter
  categories: CategoryListRelationFilter
  createdAt: DateTimeFilter
  displayName: StringFilter
  id: StringFilter
  password: StringFilter
  shops: ShopListRelationFilter
  tags: TagListRelationFilter
  transactionItem: ItemListRelationFilter
  transactionTags: TransactionTagsListRelationFilter
  transactions: TransactionListRelationFilter
  unit: UnitListRelationFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String
  username: String
}
