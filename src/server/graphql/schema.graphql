### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumTransactionTypeFieldUpdateOperationsInput {
  set: TransactionType
}

type Mutation {
  createOneTransaction(data: TransactionCreateInput!): Transaction!
  updateOneTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableFloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(after: TransactionWhereUniqueInput, before: TransactionWhereUniqueInput, first: Int, last: Int): [Transaction!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input TagCreateNestedOneWithoutTransactionsInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutTransactionsInput
  create: TagCreateWithoutTransactionsInput
}

input TagCreateOrConnectWithoutTransactionsInput {
  create: TagCreateWithoutTransactionsInput!
  where: TagWhereUniqueInput!
}

input TagCreateWithoutTransactionsInput {
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input TagUpdateOneRequiredWithoutTransactionsInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutTransactionsInput
  create: TagCreateWithoutTransactionsInput
  update: TagUpdateWithoutTransactionsInput
  upsert: TagUpsertWithoutTransactionsInput
}

input TagUpdateWithoutTransactionsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpsertWithoutTransactionsInput {
  create: TagCreateWithoutTransactionsInput!
  update: TagUpdateWithoutTransactionsInput!
}

input TagWhereUniqueInput {
  id: String
}

type Transaction {
  amount: Float
  createdAt: DateTime!
  date: DateTime
  id: String!
  isFavourite: Boolean
  name: String
  note: String
  type: TransactionType!
  updatedAt: DateTime!
}

input TransactionCreateInput {
  amount: Float
  createdAt: DateTime
  date: DateTime
  id: String
  isFavourite: Boolean
  name: String
  note: String
  tags: TransactionTagsCreateNestedManyWithoutTransactionInput
  type: TransactionType!
  updatedAt: DateTime
}

input TransactionTagsCreateManyTransactionInput {
  createdAt: DateTime
  tagId: String!
  updatedAt: DateTime
}

input TransactionTagsCreateManyTransactionInputEnvelope {
  data: [TransactionTagsCreateManyTransactionInput!]
  skipDuplicates: Boolean
}

input TransactionTagsCreateNestedManyWithoutTransactionInput {
  connect: [TransactionTagsWhereUniqueInput!]
  connectOrCreate: [TransactionTagsCreateOrConnectWithoutTransactionInput!]
  create: [TransactionTagsCreateWithoutTransactionInput!]
  createMany: TransactionTagsCreateManyTransactionInputEnvelope
}

input TransactionTagsCreateOrConnectWithoutTransactionInput {
  create: TransactionTagsCreateWithoutTransactionInput!
  where: TransactionTagsWhereUniqueInput!
}

input TransactionTagsCreateWithoutTransactionInput {
  createdAt: DateTime
  tag: TagCreateNestedOneWithoutTransactionsInput!
  updatedAt: DateTime
}

input TransactionTagsScalarWhereInput {
  AND: [TransactionTagsScalarWhereInput!]
  NOT: [TransactionTagsScalarWhereInput!]
  OR: [TransactionTagsScalarWhereInput!]
  createdAt: DateTimeFilter
  tagId: StringFilter
  transactionId: StringFilter
  updatedAt: DateTimeFilter
}

input TransactionTagsTransactionIdTagIdCompoundUniqueInput {
  tagId: String!
  transactionId: String!
}

input TransactionTagsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionTagsUpdateManyWithWhereWithoutTransactionInput {
  data: TransactionTagsUpdateManyMutationInput!
  where: TransactionTagsScalarWhereInput!
}

input TransactionTagsUpdateManyWithoutTransactionInput {
  connect: [TransactionTagsWhereUniqueInput!]
  connectOrCreate: [TransactionTagsCreateOrConnectWithoutTransactionInput!]
  create: [TransactionTagsCreateWithoutTransactionInput!]
  createMany: TransactionTagsCreateManyTransactionInputEnvelope
  delete: [TransactionTagsWhereUniqueInput!]
  deleteMany: [TransactionTagsScalarWhereInput!]
  disconnect: [TransactionTagsWhereUniqueInput!]
  set: [TransactionTagsWhereUniqueInput!]
  update: [TransactionTagsUpdateWithWhereUniqueWithoutTransactionInput!]
  updateMany: [TransactionTagsUpdateManyWithWhereWithoutTransactionInput!]
  upsert: [TransactionTagsUpsertWithWhereUniqueWithoutTransactionInput!]
}

input TransactionTagsUpdateWithWhereUniqueWithoutTransactionInput {
  data: TransactionTagsUpdateWithoutTransactionInput!
  where: TransactionTagsWhereUniqueInput!
}

input TransactionTagsUpdateWithoutTransactionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  tag: TagUpdateOneRequiredWithoutTransactionsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionTagsUpsertWithWhereUniqueWithoutTransactionInput {
  create: TransactionTagsCreateWithoutTransactionInput!
  update: TransactionTagsUpdateWithoutTransactionInput!
  where: TransactionTagsWhereUniqueInput!
}

input TransactionTagsWhereUniqueInput {
  transactionId_tagId: TransactionTagsTransactionIdTagIdCompoundUniqueInput
}

enum TransactionType {
  EXPENSE
  INCOME
}

input TransactionUpdateInput {
  amount: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isFavourite: NullableBoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  tags: TransactionTagsUpdateManyWithoutTransactionInput
  type: EnumTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionWhereUniqueInput {
  id: String
}
