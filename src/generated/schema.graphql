### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Category {
  icon: String!
  id: String!
  name: String!
  strategies: [String!]!
  type: Type!
}

input CategoryCreateInput {
  createdAt: DateTime
  icon: String!
  id: String
  name: String!
  strategies: CategoryCreatestrategiesInput
  transactions: TransactionCreateNestedManyWithoutCategoriesInput
  type: Type
  updatedAt: DateTime
}

input CategoryCreateNestedManyWithoutTransactionsInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutTransactionsInput!]
  create: [CategoryCreateWithoutTransactionsInput!]
}

input CategoryCreateOrConnectWithoutTransactionsInput {
  create: CategoryCreateWithoutTransactionsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutTransactionsInput {
  createdAt: DateTime
  icon: String!
  id: String
  name: String!
  strategies: CategoryCreatestrategiesInput
  type: Type
  updatedAt: DateTime
}

input CategoryCreatestrategiesInput {
  set: [String!]
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryOrderByWithRelationInput {
  createdAt: SortOrder
  icon: SortOrder
  id: SortOrder
  name: SortOrder
  strategies: SortOrder
  transactions: TransactionOrderByRelationAggregateInput
  type: SortOrder
  updatedAt: SortOrder
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  createdAt: DateTimeFilter
  icon: StringFilter
  id: StringFilter
  name: StringFilter
  strategies: StringNullableListFilter
  type: EnumTypeFilter
  updatedAt: DateTimeFilter
}

input CategoryUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  strategies: CategoryUpdatestrategiesInput
  transactions: TransactionUpdateManyWithoutCategoriesInput
  type: EnumTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  strategies: CategoryUpdatestrategiesInput
  type: EnumTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateManyWithWhereWithoutTransactionsInput {
  data: CategoryUpdateManyMutationInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateManyWithoutTransactionsInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutTransactionsInput!]
  create: [CategoryCreateWithoutTransactionsInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutTransactionsInput!]
  updateMany: [CategoryUpdateManyWithWhereWithoutTransactionsInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutTransactionsInput!]
}

input CategoryUpdateWithWhereUniqueWithoutTransactionsInput {
  data: CategoryUpdateWithoutTransactionsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpdateWithoutTransactionsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  strategies: CategoryUpdatestrategiesInput
  type: EnumTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdatestrategiesInput {
  push: String
  set: [String!]
}

input CategoryUpsertWithWhereUniqueWithoutTransactionsInput {
  create: CategoryCreateWithoutTransactionsInput!
  update: CategoryUpdateWithoutTransactionsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  createdAt: DateTimeFilter
  icon: StringFilter
  id: StringFilter
  name: StringFilter
  strategies: StringNullableListFilter
  transactions: TransactionListRelationFilter
  type: EnumTypeFilter
  updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
  icon: String
  id: String
  name: String
}

enum Color {
  BLUE
  GRAY
  GREEN
  INDIGO
  ORANGE
  PINK
  PURPLE
  YELLOW
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumColorFieldUpdateOperationsInput {
  set: Color
}

input EnumColorFilter {
  equals: Color
  in: [Color!]
  not: NestedEnumColorFilter
  notIn: [Color!]
}

input EnumTypeFieldUpdateOperationsInput {
  set: Type
}

input EnumTypeFilter {
  equals: Type
  in: [Type!]
  not: NestedEnumTypeFilter
  notIn: [Type!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

type Mutation {
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneWallet(data: WalletCreateInput!): Wallet!
  deleteOneCategory(where: CategoryWhereUniqueInput!): Category
  deleteOneWallet(where: WalletWhereUniqueInput!): Wallet
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneWallet(data: WalletUpdateInput!, where: WalletWhereUniqueInput!): Wallet
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumColorFilter {
  equals: Color
  in: [Color!]
  not: NestedEnumColorFilter
  notIn: [Color!]
}

input NestedEnumTypeFilter {
  equals: Type
  in: [Type!]
  not: NestedEnumTypeFilter
  notIn: [Type!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  categories(cursor: CategoryWhereUniqueInput, orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  wallet(where: WalletWhereUniqueInput!): Wallet
  wallets(cursor: WalletWhereUniqueInput, skip: Int, take: Int): [Wallet!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input TransactionCreateManyWalletInput {
  amount: Float
  createdAt: DateTime
  id: String
  title: String!
  type: Type
  updatedAt: DateTime
}

input TransactionCreateManyWalletInputEnvelope {
  data: [TransactionCreateManyWalletInput!]
  skipDuplicates: Boolean
}

input TransactionCreateNestedManyWithoutCategoriesInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutCategoriesInput!]
  create: [TransactionCreateWithoutCategoriesInput!]
}

input TransactionCreateNestedManyWithoutWalletInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutWalletInput!]
  create: [TransactionCreateWithoutWalletInput!]
  createMany: TransactionCreateManyWalletInputEnvelope
}

input TransactionCreateOrConnectWithoutCategoriesInput {
  create: TransactionCreateWithoutCategoriesInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutWalletInput {
  create: TransactionCreateWithoutWalletInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateWithoutCategoriesInput {
  amount: Float
  createdAt: DateTime
  id: String
  title: String!
  type: Type
  updatedAt: DateTime
  wallet: WalletCreateNestedOneWithoutTransactionInput!
}

input TransactionCreateWithoutWalletInput {
  amount: Float
  categories: CategoryCreateNestedManyWithoutTransactionsInput
  createdAt: DateTime
  id: String
  title: String!
  type: Type
  updatedAt: DateTime
}

input TransactionListRelationFilter {
  every: TransactionWhereInput
  none: TransactionWhereInput
  some: TransactionWhereInput
}

input TransactionOrderByRelationAggregateInput {
  _count: SortOrder
}

input TransactionScalarWhereInput {
  AND: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  amount: FloatFilter
  createdAt: DateTimeFilter
  id: StringFilter
  title: StringFilter
  type: EnumTypeFilter
  updatedAt: DateTimeFilter
  walletId: StringFilter
}

input TransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  type: EnumTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpdateManyWithWhereWithoutCategoriesInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithWhereWithoutWalletInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithoutCategoriesInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutCategoriesInput!]
  create: [TransactionCreateWithoutCategoriesInput!]
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutCategoriesInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input TransactionUpdateManyWithoutWalletInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutWalletInput!]
  create: [TransactionCreateWithoutWalletInput!]
  createMany: TransactionCreateManyWalletInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutWalletInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutWalletInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutWalletInput!]
}

input TransactionUpdateWithWhereUniqueWithoutCategoriesInput {
  data: TransactionUpdateWithoutCategoriesInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithWhereUniqueWithoutWalletInput {
  data: TransactionUpdateWithoutWalletInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithoutCategoriesInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  type: EnumTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  wallet: WalletUpdateOneRequiredWithoutTransactionInput
}

input TransactionUpdateWithoutWalletInput {
  amount: FloatFieldUpdateOperationsInput
  categories: CategoryUpdateManyWithoutTransactionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  type: EnumTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpsertWithWhereUniqueWithoutCategoriesInput {
  create: TransactionCreateWithoutCategoriesInput!
  update: TransactionUpdateWithoutCategoriesInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpsertWithWhereUniqueWithoutWalletInput {
  create: TransactionCreateWithoutWalletInput!
  update: TransactionUpdateWithoutWalletInput!
  where: TransactionWhereUniqueInput!
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  amount: FloatFilter
  categories: CategoryListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  title: StringFilter
  type: EnumTypeFilter
  updatedAt: DateTimeFilter
  wallet: WalletWhereInput
  walletId: StringFilter
}

input TransactionWhereUniqueInput {
  id: String
}

enum Type {
  EXPENSE
  INCOME
}

type Wallet {
  color: Color!
  icon: String!
  id: String!
  initialBalance: Float!
  name: String!
}

input WalletCreateInput {
  color: Color
  createdAt: DateTime
  icon: String!
  id: String
  initialBalance: Float
  name: String!
  transaction: TransactionCreateNestedManyWithoutWalletInput
  updatedAt: DateTime
}

input WalletCreateNestedOneWithoutTransactionInput {
  connect: WalletWhereUniqueInput
  connectOrCreate: WalletCreateOrConnectWithoutTransactionInput
  create: WalletCreateWithoutTransactionInput
}

input WalletCreateOrConnectWithoutTransactionInput {
  create: WalletCreateWithoutTransactionInput!
  where: WalletWhereUniqueInput!
}

input WalletCreateWithoutTransactionInput {
  color: Color
  createdAt: DateTime
  icon: String!
  id: String
  initialBalance: Float
  name: String!
  updatedAt: DateTime
}

input WalletUpdateInput {
  color: EnumColorFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  initialBalance: FloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  transaction: TransactionUpdateManyWithoutWalletInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input WalletUpdateOneRequiredWithoutTransactionInput {
  connect: WalletWhereUniqueInput
  connectOrCreate: WalletCreateOrConnectWithoutTransactionInput
  create: WalletCreateWithoutTransactionInput
  update: WalletUpdateWithoutTransactionInput
  upsert: WalletUpsertWithoutTransactionInput
}

input WalletUpdateWithoutTransactionInput {
  color: EnumColorFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  initialBalance: FloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input WalletUpsertWithoutTransactionInput {
  create: WalletCreateWithoutTransactionInput!
  update: WalletUpdateWithoutTransactionInput!
}

input WalletWhereInput {
  AND: [WalletWhereInput!]
  NOT: [WalletWhereInput!]
  OR: [WalletWhereInput!]
  color: EnumColorFilter
  createdAt: DateTimeFilter
  icon: StringFilter
  id: StringFilter
  initialBalance: FloatFilter
  name: StringFilter
  transaction: TransactionListRelationFilter
  updatedAt: DateTimeFilter
}

input WalletWhereUniqueInput {
  id: String
  name: String
}
