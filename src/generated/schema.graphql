### This file was generated by Nexus Schema
### Do not make changes to this file directly


input CategoryCreateNestedManyWithoutTransactionsInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutTransactionsInput!]
  create: [CategoryCreateWithoutTransactionsInput!]
}

input CategoryCreateOrConnectWithoutTransactionsInput {
  create: CategoryCreateWithoutTransactionsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutTransactionsInput {
  createdAt: DateTime
  icon: String!
  id: String
  name: String!
  strategy: Json!
  type: Type!
  updatedAt: DateTime
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  createdAt: DateTimeFilter
  icon: StringFilter
  id: StringFilter
  name: StringFilter
  type: EnumTypeFilter
  updatedAt: DateTimeFilter
}

input CategoryUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  strategy: Json
  type: EnumTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateManyWithWhereWithoutTransactionsInput {
  data: CategoryUpdateManyMutationInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateManyWithoutTransactionsInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutTransactionsInput!]
  create: [CategoryCreateWithoutTransactionsInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutTransactionsInput!]
  updateMany: [CategoryUpdateManyWithWhereWithoutTransactionsInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutTransactionsInput!]
}

input CategoryUpdateWithWhereUniqueWithoutTransactionsInput {
  data: CategoryUpdateWithoutTransactionsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpdateWithoutTransactionsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  strategy: Json
  type: EnumTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpsertWithWhereUniqueWithoutTransactionsInput {
  create: CategoryCreateWithoutTransactionsInput!
  update: CategoryUpdateWithoutTransactionsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryWhereUniqueInput {
  icon: String
  id: String
  name: String
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumTypeFieldUpdateOperationsInput {
  set: Type
}

input EnumTypeFilter {
  equals: Type
  in: [Type!]
  not: NestedEnumTypeFilter
  notIn: [Type!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

scalar Json

type Mutation {
  createOneWallet(data: WalletCreateInput!): Wallet!
  deleteOneWallet(where: WalletWhereUniqueInput!): Wallet
  updateOneWallet(data: WalletUpdateInput!, where: WalletWhereUniqueInput!): Wallet
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumTypeFilter {
  equals: Type
  in: [Type!]
  not: NestedEnumTypeFilter
  notIn: [Type!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  wallet(where: WalletWhereUniqueInput!): Wallet
  wallets(cursor: WalletWhereUniqueInput, skip: Int, take: Int): [Wallet!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input TransactionCreateManyWalletInput {
  amount: Float
  createdAt: DateTime
  id: String
  title: String!
  type: Type
  updatedAt: DateTime
}

input TransactionCreateManyWalletInputEnvelope {
  data: [TransactionCreateManyWalletInput!]
}

input TransactionCreateNestedManyWithoutWalletInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutWalletInput!]
  create: [TransactionCreateWithoutWalletInput!]
  createMany: TransactionCreateManyWalletInputEnvelope
}

input TransactionCreateOrConnectWithoutWalletInput {
  create: TransactionCreateWithoutWalletInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateWithoutWalletInput {
  amount: Float
  categories: CategoryCreateNestedManyWithoutTransactionsInput
  createdAt: DateTime
  id: String
  title: String!
  type: Type
  updatedAt: DateTime
}

input TransactionScalarWhereInput {
  AND: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  amount: FloatFilter
  createdAt: DateTimeFilter
  id: StringFilter
  title: StringFilter
  type: EnumTypeFilter
  updatedAt: DateTimeFilter
  walletId: StringFilter
}

input TransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  type: EnumTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpdateManyWithWhereWithoutWalletInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithoutWalletInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutWalletInput!]
  create: [TransactionCreateWithoutWalletInput!]
  createMany: TransactionCreateManyWalletInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutWalletInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutWalletInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutWalletInput!]
}

input TransactionUpdateWithWhereUniqueWithoutWalletInput {
  data: TransactionUpdateWithoutWalletInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithoutWalletInput {
  amount: FloatFieldUpdateOperationsInput
  categories: CategoryUpdateManyWithoutTransactionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  type: EnumTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpsertWithWhereUniqueWithoutWalletInput {
  create: TransactionCreateWithoutWalletInput!
  update: TransactionUpdateWithoutWalletInput!
  where: TransactionWhereUniqueInput!
}

input TransactionWhereUniqueInput {
  id: String
}

enum Type {
  EXPENSE
  INCOME
}

type Wallet {
  color: String!
  icon: String!
  id: String!
  initialBalance: Float!
  name: String!
}

input WalletCreateInput {
  color: String!
  createdAt: DateTime
  icon: String!
  id: String
  initialBalance: Float!
  name: String!
  transaction: TransactionCreateNestedManyWithoutWalletInput
  updatedAt: DateTime
}

input WalletUpdateInput {
  color: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: StringFieldUpdateOperationsInput
  initialBalance: FloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  transaction: TransactionUpdateManyWithoutWalletInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input WalletWhereUniqueInput {
  id: String
  name: String
}
