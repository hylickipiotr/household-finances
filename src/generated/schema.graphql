### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Category {
  icon: String!
  id: String!
  name: String!
  strategies: [String!]!
  type: Type!
}

input CategoryCreateInput {
  createdAt: DateTime
  icon: String!
  id: String
  name: String!
  strategies: CategoryCreatestrategiesInput
  transactions: TransactionCreateNestedManyWithoutCategoryInput
  type: Type
  updatedAt: DateTime
}

input CategoryCreateNestedOneWithoutTransactionsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutTransactionsInput
  create: CategoryCreateWithoutTransactionsInput
}

input CategoryCreateOrConnectWithoutTransactionsInput {
  create: CategoryCreateWithoutTransactionsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutTransactionsInput {
  createdAt: DateTime
  icon: String!
  id: String
  name: String!
  strategies: CategoryCreatestrategiesInput
  type: Type
  updatedAt: DateTime
}

input CategoryCreatestrategiesInput {
  set: [String!]
}

input CategoryOrderByWithRelationInput {
  createdAt: SortOrder
  icon: SortOrder
  id: SortOrder
  name: SortOrder
  strategies: SortOrder
  transactions: TransactionOrderByRelationAggregateInput
  type: SortOrder
  updatedAt: SortOrder
}

input CategoryUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  strategies: CategoryUpdatestrategiesInput
  transactions: TransactionUpdateManyWithoutCategoryInput
  type: EnumTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateOneRequiredWithoutTransactionsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutTransactionsInput
  create: CategoryCreateWithoutTransactionsInput
  update: CategoryUpdateWithoutTransactionsInput
  upsert: CategoryUpsertWithoutTransactionsInput
}

input CategoryUpdateWithoutTransactionsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  strategies: CategoryUpdatestrategiesInput
  type: EnumTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdatestrategiesInput {
  push: String
  set: [String!]
}

input CategoryUpsertWithoutTransactionsInput {
  create: CategoryCreateWithoutTransactionsInput!
  update: CategoryUpdateWithoutTransactionsInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  createdAt: DateTimeFilter
  icon: StringFilter
  id: StringFilter
  name: StringFilter
  strategies: StringNullableListFilter
  transactions: TransactionListRelationFilter
  type: EnumTypeFilter
  updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
  icon: String
  id: String
  name: String
}

enum Color {
  BLUE
  GRAY
  GREEN
  INDIGO
  ORANGE
  PINK
  PURPLE
  YELLOW
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumColorFieldUpdateOperationsInput {
  set: Color
}

input EnumColorFilter {
  equals: Color
  in: [Color!]
  not: NestedEnumColorFilter
  notIn: [Color!]
}

input EnumTypeFieldUpdateOperationsInput {
  set: Type
}

input EnumTypeFilter {
  equals: Type
  in: [Type!]
  not: NestedEnumTypeFilter
  notIn: [Type!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

type Mutation {
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneTransaction(data: TransactionCreateInput!): Transaction!
  createOneWallet(data: WalletCreateInput!): Wallet!
  deleteOneCategory(where: CategoryWhereUniqueInput!): Category
  deleteOneTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteOneWallet(where: WalletWhereUniqueInput!): Wallet
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  updateOneWallet(data: WalletUpdateInput!, where: WalletWhereUniqueInput!): Wallet
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumColorFilter {
  equals: Color
  in: [Color!]
  not: NestedEnumColorFilter
  notIn: [Color!]
}

input NestedEnumTypeFilter {
  equals: Type
  in: [Type!]
  not: NestedEnumTypeFilter
  notIn: [Type!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  categories(cursor: CategoryWhereUniqueInput, orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  topMonthlyWalletCategories(date: String!, take: Int, walletId: String!): [TopCategory!]
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(cursor: TransactionWhereUniqueInput, orderBy: [TransactionOrderByWithRelationInput!], skip: Int, take: Int, where: TransactionWhereInput): [Transaction!]!
  wallet(where: WalletWhereUniqueInput!): Wallet
  walletMonthlyOverview(date: String!, id: String!): WalletMonthlyOverview!
  wallets(cursor: WalletWhereUniqueInput, skip: Int, take: Int): [Wallet!]!
  walletsStatistics(where: WalletWhereInput): [WalletStatistics!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type TopCategory {
  amount: Float!
  category: Category!
  transactionsCount: Int!
}

type Transaction {
  amount: Float!
  category: Category!
  date: DateTime!
  description: String
  id: String!
  title: String!
  wallet: Wallet!
}

input TransactionCreateInput {
  amount: Float
  category: CategoryCreateNestedOneWithoutTransactionsInput!
  createdAt: DateTime
  date: DateTime!
  description: String
  id: String
  title: String!
  updatedAt: DateTime
  wallet: WalletCreateNestedOneWithoutTransactionsInput!
}

input TransactionCreateManyCategoryInput {
  amount: Float
  createdAt: DateTime
  date: DateTime!
  description: String
  id: String
  title: String!
  updatedAt: DateTime
  walletId: String!
}

input TransactionCreateManyCategoryInputEnvelope {
  data: [TransactionCreateManyCategoryInput!]
  skipDuplicates: Boolean
}

input TransactionCreateManyWalletInput {
  amount: Float
  categoryId: String!
  createdAt: DateTime
  date: DateTime!
  description: String
  id: String
  title: String!
  updatedAt: DateTime
}

input TransactionCreateManyWalletInputEnvelope {
  data: [TransactionCreateManyWalletInput!]
  skipDuplicates: Boolean
}

input TransactionCreateNestedManyWithoutCategoryInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutCategoryInput!]
  create: [TransactionCreateWithoutCategoryInput!]
  createMany: TransactionCreateManyCategoryInputEnvelope
}

input TransactionCreateNestedManyWithoutWalletInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutWalletInput!]
  create: [TransactionCreateWithoutWalletInput!]
  createMany: TransactionCreateManyWalletInputEnvelope
}

input TransactionCreateOrConnectWithoutCategoryInput {
  create: TransactionCreateWithoutCategoryInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutWalletInput {
  create: TransactionCreateWithoutWalletInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateWithoutCategoryInput {
  amount: Float
  createdAt: DateTime
  date: DateTime!
  description: String
  id: String
  title: String!
  updatedAt: DateTime
  wallet: WalletCreateNestedOneWithoutTransactionsInput!
}

input TransactionCreateWithoutWalletInput {
  amount: Float
  category: CategoryCreateNestedOneWithoutTransactionsInput!
  createdAt: DateTime
  date: DateTime!
  description: String
  id: String
  title: String!
  updatedAt: DateTime
}

input TransactionListRelationFilter {
  every: TransactionWhereInput
  none: TransactionWhereInput
  some: TransactionWhereInput
}

input TransactionOrderByRelationAggregateInput {
  _count: SortOrder
}

input TransactionOrderByWithRelationInput {
  amount: SortOrder
  category: CategoryOrderByWithRelationInput
  categoryId: SortOrder
  createdAt: SortOrder
  date: SortOrder
  description: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  wallet: WalletOrderByWithRelationInput
  walletId: SortOrder
}

input TransactionScalarWhereInput {
  AND: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  amount: FloatFilter
  categoryId: StringFilter
  createdAt: DateTimeFilter
  date: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  walletId: StringFilter
}

input TransactionUpdateInput {
  amount: FloatFieldUpdateOperationsInput
  category: CategoryUpdateOneRequiredWithoutTransactionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  wallet: WalletUpdateOneRequiredWithoutTransactionsInput
}

input TransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpdateManyWithWhereWithoutCategoryInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithWhereWithoutWalletInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithoutCategoryInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutCategoryInput!]
  create: [TransactionCreateWithoutCategoryInput!]
  createMany: TransactionCreateManyCategoryInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutCategoryInput!]
}

input TransactionUpdateManyWithoutWalletInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutWalletInput!]
  create: [TransactionCreateWithoutWalletInput!]
  createMany: TransactionCreateManyWalletInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutWalletInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutWalletInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutWalletInput!]
}

input TransactionUpdateWithWhereUniqueWithoutCategoryInput {
  data: TransactionUpdateWithoutCategoryInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithWhereUniqueWithoutWalletInput {
  data: TransactionUpdateWithoutWalletInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithoutCategoryInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  wallet: WalletUpdateOneRequiredWithoutTransactionsInput
}

input TransactionUpdateWithoutWalletInput {
  amount: FloatFieldUpdateOperationsInput
  category: CategoryUpdateOneRequiredWithoutTransactionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpsertWithWhereUniqueWithoutCategoryInput {
  create: TransactionCreateWithoutCategoryInput!
  update: TransactionUpdateWithoutCategoryInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpsertWithWhereUniqueWithoutWalletInput {
  create: TransactionCreateWithoutWalletInput!
  update: TransactionUpdateWithoutWalletInput!
  where: TransactionWhereUniqueInput!
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  amount: FloatFilter
  category: CategoryWhereInput
  categoryId: StringFilter
  createdAt: DateTimeFilter
  date: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  wallet: WalletWhereInput
  walletId: StringFilter
}

input TransactionWhereUniqueInput {
  id: String
}

enum Type {
  EXPENSE
  INCOME
}

type Wallet {
  color: Color!
  icon: String!
  id: String!
  initialBalance: Float!
  name: String!
}

input WalletCreateInput {
  color: Color
  createdAt: DateTime
  icon: String!
  id: String
  initialBalance: Float
  name: String!
  transactions: TransactionCreateNestedManyWithoutWalletInput
  updatedAt: DateTime
}

input WalletCreateNestedOneWithoutTransactionsInput {
  connect: WalletWhereUniqueInput
  connectOrCreate: WalletCreateOrConnectWithoutTransactionsInput
  create: WalletCreateWithoutTransactionsInput
}

input WalletCreateOrConnectWithoutTransactionsInput {
  create: WalletCreateWithoutTransactionsInput!
  where: WalletWhereUniqueInput!
}

input WalletCreateWithoutTransactionsInput {
  color: Color
  createdAt: DateTime
  icon: String!
  id: String
  initialBalance: Float
  name: String!
  updatedAt: DateTime
}

type WalletMonthlyOverview {
  balance: Float!
  expenses: Float!
  incomes: Float!
}

input WalletOrderByWithRelationInput {
  color: SortOrder
  createdAt: SortOrder
  icon: SortOrder
  id: SortOrder
  initialBalance: SortOrder
  name: SortOrder
  transactions: TransactionOrderByRelationAggregateInput
  updatedAt: SortOrder
}

type WalletStatistics {
  totalAmount: Float!
  wallet: Wallet!
}

input WalletUpdateInput {
  color: EnumColorFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  initialBalance: FloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutWalletInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input WalletUpdateOneRequiredWithoutTransactionsInput {
  connect: WalletWhereUniqueInput
  connectOrCreate: WalletCreateOrConnectWithoutTransactionsInput
  create: WalletCreateWithoutTransactionsInput
  update: WalletUpdateWithoutTransactionsInput
  upsert: WalletUpsertWithoutTransactionsInput
}

input WalletUpdateWithoutTransactionsInput {
  color: EnumColorFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  icon: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  initialBalance: FloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input WalletUpsertWithoutTransactionsInput {
  create: WalletCreateWithoutTransactionsInput!
  update: WalletUpdateWithoutTransactionsInput!
}

input WalletWhereInput {
  AND: [WalletWhereInput!]
  NOT: [WalletWhereInput!]
  OR: [WalletWhereInput!]
  color: EnumColorFilter
  createdAt: DateTimeFilter
  icon: StringFilter
  id: StringFilter
  initialBalance: FloatFilter
  name: StringFilter
  transactions: TransactionListRelationFilter
  updatedAt: DateTimeFilter
}

input WalletWhereUniqueInput {
  id: String
  name: String
}
